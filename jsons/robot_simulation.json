{
  "addControllerToWorld": {
    "kind": "function",
    "name": "addControllerToWorld",
    "description": "<p>Add a controller to the world.  </p><p>The controller is a unit of computation modelled after Unity's MonoBehaviour. It is used to  \nencapsulate the logic of the simulation. Controllers can be used to create robots, sensors,  \nactuators, and other objects in the simulation.  </p><p>The controller should be added to the world using this function in order for the simulation to  \naccess the controller's logic.  </p><p><em>*This is a Utility function and should be called within init_simulation.</em></p>",
    "params": [
      [
        "controller",
        "Controller"
      ],
      [
        "world",
        "World"
      ]
    ],
    "retType": "void"
  },
  "createCSE": {
    "kind": "function",
    "name": "createCSE",
    "description": "<p>Creates a CSE machine as a Program Object. The CSE machine is used to evaluate the code written  \nby the user. The execution of the code will be automatically synchronized with the simulation  \nto ensure that the code is executed at the correct time.  </p><p>The returned Program object is designed to be added to the world using addControllerToWorld.  </p><p><strong>This is a Controller function and should be called within init_simulation.</strong></p>",
    "params": [],
    "retType": "Program"
  },
  "createCuboid": {
    "kind": "function",
    "name": "createCuboid",
    "description": "<p>Creates a cuboid. joel-todo: The dynamic version wont work  </p><p>This function is used to create the floor and wall controllers.  </p><p>The returned Cuboid object is designed to be added to the world using addControllerToWorld.  </p><p><strong>This is a Controller function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "physics",
        "Physics"
      ],
      [
        "renderer",
        "Renderer"
      ],
      [
        "position_x",
        "number"
      ],
      [
        "position_y",
        "number"
      ],
      [
        "position_z",
        "number"
      ],
      [
        "width",
        "number"
      ],
      [
        "length",
        "number"
      ],
      [
        "height",
        "number"
      ],
      [
        "mass",
        "number"
      ],
      [
        "color",
        "string | number"
      ],
      [
        "bodyType",
        "string"
      ]
    ],
    "retType": "Cuboid"
  },
  "createCustomPhysics": {
    "kind": "function",
    "name": "createCustomPhysics",
    "description": "<p>Create a physics engine with the provided gravity and timestep. A physics engine  \nwith default gravity and timestep can be created using createPhysics.  </p><p>The returned Physics object is designed to be passed into createWorld.  </p><p><strong>This is a configuration function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "gravity",
        "number"
      ],
      [
        "timestep",
        "number"
      ]
    ],
    "retType": "Physics"
  },
  "createEv3": {
    "kind": "function",
    "name": "createEv3",
    "description": "<p>Create an EV3.  </p><p>The resulting EV3 should be saved to the context using saveToContext.  </p><p>The returned EV3 object is designed to be added to the world using addControllerToWorld.  </p><p><strong>This is a Controller function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "physics",
        "Physics"
      ],
      [
        "renderer",
        "Renderer"
      ]
    ],
    "retType": "DefaultEv3"
  },
  "createFloor": {
    "kind": "function",
    "name": "createFloor",
    "description": "<p>Create a floor. This function is a wrapper around createCuboid.  </p><p>The returned Cuboid object is designed to be added to the world using addControllerToWorld.  </p><p><strong>This is a Controller function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "physics",
        "Physics"
      ],
      [
        "renderer",
        "Renderer"
      ]
    ],
    "retType": "Cuboid"
  },
  "createPaper": {
    "kind": "function",
    "name": "createPaper",
    "description": "<p>Creates a paper on the floor.  </p><p>The returned Paper object is designed to be added to the world using addControllerToWorld.  </p><p> <strong>This is a Controller function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "render",
        "Renderer"
      ],
      [
        "url",
        "string"
      ],
      [
        "width",
        "number"
      ],
      [
        "height",
        "number"
      ],
      [
        "x",
        "number"
      ],
      [
        "y",
        "number"
      ],
      [
        "rotation",
        "number"
      ]
    ],
    "retType": "Paper"
  },
  "createPhysics": {
    "kind": "function",
    "name": "createPhysics",
    "description": "<p>Create a physics engine with default gravity and timestep. Default gravity is -9.81 and timestep is 1/20.  \nA custom physics engine can be created using createCustomPhysics.  </p><p>The returned Physics object is designed to be passed into createWorld.  </p><p><strong>This is a configuration function and should be called within init_simulation.</strong></p>",
    "params": [],
    "retType": "Physics"
  },
  "createRenderer": {
    "kind": "function",
    "name": "createRenderer",
    "description": "<p>Creates a renderer for the simulation.  </p><p>The returned Renderer object is designed to be passed into createWorld.  </p><p><strong>This is a configuration function and should be called within init_simulation.</strong></p>",
    "params": [],
    "retType": "Renderer"
  },
  "createRobotConsole": {
    "kind": "function",
    "name": "createRobotConsole",
    "description": "<p>Creates a RobotConsole for the simulation.  </p><p>The RobotConsole is used to display messages and errors to the user. The console  \nmessages can be seen in the console tab of the simulator.  </p><p>The returned RobotConsole object is designed to be passed into createWorld.  </p><p><strong>This is a configuration function and should be called within init_simulation.</strong></p>",
    "params": [],
    "retType": "RobotConsole"
  },
  "createTimer": {
    "kind": "function",
    "name": "createTimer",
    "description": "<p>Creates a Timer for the simulation.  </p><p>The returned Timer object is designed to be passed into createWorld.  </p><p><strong>This is a configuration function and should be called within init_simulation.</strong></p>",
    "params": [],
    "retType": "Timer"
  },
  "createWall": {
    "kind": "function",
    "name": "createWall",
    "description": "<p>Creates a wall. This function is a wrapper around createCuboid.  </p><p>The returned Cuboid object is designed to be added to the world using addControllerToWorld.  </p><p><strong>This is a Controller function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "physics",
        "Physics"
      ],
      [
        "renderer",
        "Renderer"
      ],
      [
        "x",
        "number"
      ],
      [
        "y",
        "number"
      ],
      [
        "width",
        "number"
      ],
      [
        "length",
        "number"
      ],
      [
        "height",
        "number"
      ]
    ],
    "retType": "Cuboid"
  },
  "createWorld": {
    "kind": "function",
    "name": "createWorld",
    "description": "<p>Creates a custom world with the provided physics, renderer, timer and console .  </p><p>A world is responsible for managing the physics, rendering, timing and console of the simulation.  \nIt also manages the controllers that are added to the world, ensuring that the appropriate functions  \nare called at the correct time.  </p><p>The returned World object is designed to be returned by the init_simulation callback.  </p><p>You can add controllers to the world using addControllerToWorld.  </p><p><strong>This is a configuration function and should be called within init_simulation.</strong></p>",
    "params": [
      [
        "physics",
        "Physics"
      ],
      [
        "renderer",
        "Renderer"
      ],
      [
        "timer",
        "Timer"
      ],
      [
        "robotConsole",
        "RobotConsole"
      ]
    ],
    "retType": "World"
  },
  "ev3_colorSensor": {
    "kind": "function",
    "name": "ev3_colorSensor",
    "description": "<p>Gets the colour sensor connected any of ports 1, 2, 3 or 4.</p>",
    "params": [],
    "retType": "ColorSensor"
  },
  "ev3_colorSensorBlue": {
    "kind": "function",
    "name": "ev3_colorSensorBlue",
    "description": "<p>Gets the amount of blue seen by the colour sensor.</p>",
    "params": [
      [
        "colorSensor",
        "ColorSensor"
      ]
    ],
    "retType": "number"
  },
  "ev3_colorSensorGreen": {
    "kind": "function",
    "name": "ev3_colorSensorGreen",
    "description": "<p>Gets the amount of green seen by the colour sensor.</p>",
    "params": [
      [
        "colorSensor",
        "ColorSensor"
      ]
    ],
    "retType": "number"
  },
  "ev3_colorSensorRed": {
    "kind": "function",
    "name": "ev3_colorSensorRed",
    "description": "<p>Gets the amount of red seen by the colour sensor.</p>",
    "params": [
      [
        "colorSensor",
        "ColorSensor"
      ]
    ],
    "retType": "number"
  },
  "ev3_motorA": {
    "kind": "function",
    "name": "ev3_motorA",
    "description": "<p>Gets the motor connected to port A.</p>",
    "params": [],
    "retType": "MotorFunctionReturnType"
  },
  "ev3_motorB": {
    "kind": "function",
    "name": "ev3_motorB",
    "description": "<p>Gets the motor connected to port B.</p>",
    "params": [],
    "retType": "MotorFunctionReturnType"
  },
  "ev3_motorC": {
    "kind": "function",
    "name": "ev3_motorC",
    "description": "<p>Gets the motor connected to port C.</p>",
    "params": [],
    "retType": "MotorFunctionReturnType"
  },
  "ev3_motorD": {
    "kind": "function",
    "name": "ev3_motorD",
    "description": "<p>Gets the motor connected to port D.</p>",
    "params": [],
    "retType": "MotorFunctionReturnType"
  },
  "ev3_pause": {
    "kind": "function",
    "name": "ev3_pause",
    "description": "<p>Pauses for a period of time.</p>",
    "params": [
      [
        "duration",
        "number"
      ]
    ],
    "retType": "void"
  },
  "ev3_runToRelativePosition": {
    "kind": "function",
    "name": "ev3_runToRelativePosition",
    "description": "<p>Causes the motor to rotate until the position reaches ev3_motorGetPosition() + position with the given speed.\nNote: this works by sending instructions to the motors.\nThis will return almost immediately, without waiting for the motor to reach the given absolute position.\nIf you wish to wait, use ev3_pause.</p>",
    "params": [
      [
        "motor",
        "MotorFunctionReturnType"
      ],
      [
        "position",
        "number"
      ],
      [
        "speed",
        "number"
      ]
    ],
    "retType": "void"
  },
  "ev3_ultrasonicSensor": {
    "kind": "function",
    "name": "ev3_ultrasonicSensor",
    "description": "<p>Gets the ultrasonic sensor connected any of ports 1, 2, 3 or 4.</p>",
    "params": [],
    "retType": "UltrasonicSensor"
  },
  "ev3_ultrasonicSensorDistance": {
    "kind": "function",
    "name": "ev3_ultrasonicSensorDistance",
    "description": "<p>Gets the distance read by the ultrasonic sensor in centimeters.</p>",
    "params": [
      [
        "ultraSonicSensor",
        "UltrasonicSensor"
      ]
    ],
    "retType": "number"
  },
  "init_simulation": {
    "kind": "function",
    "name": "init_simulation",
    "description": "<p>Initialize the simulation world. This function is to be called before the robot code.  \nThis function is used to describe the simulation environment and the controllers.  </p><p>The callback function takes in no parameters and returns a world created by createWorld.  \nThe world should be configured with the physics, renderer, timer and console.  \nThe controllers should be added to the world using addControllerToWorld.  \nThe world should be saved to the context using saveToContext.</p>",
    "params": [
      [
        "worldFactory",
        "Function"
      ]
    ],
    "retType": "void"
  },
  "saveToContext": {
    "kind": "function",
    "name": "saveToContext",
    "description": "<p>Save a value to the context.  </p><p>There are 2 important values to be saved. The world and the ev3.  \nThe world needs to be saved in order for the simulation to access the physics, renderer, timer and console.  \nThe ev3 needs to be saved in order for the \"ev3_\" functions to access the EV3</p>",
    "params": [
      [
        "key",
        "string"
      ],
      [
        "value",
        "any"
      ]
    ],
    "retType": "void"
  }
}