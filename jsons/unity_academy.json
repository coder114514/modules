{
  "add_impulse_force": "<div><h4>add_impulse_force(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Add an impulse force on the Rigidbody attached on the GameObject, &lt;b&gt;using its mass&lt;/b&gt;.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "apply_rigidbody": "<div><h4>apply_rigidbody(gameObjectIdentifier: GameObjectIdentifier) → {void}</h4><div class=\"description\"><p>Apply rigidbody (2D or 3D based on the current dimension mode) to the given game object to use Unity's physics engine&lt;br&gt;  \n&lt;br&gt;&lt;br&gt;All other functions under the Physics - Rigidbody category require calling this function first on the applied game objects.  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/Rigidbody.html (For 3D Mode) or  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/Rigidbody2D.html (For 2D Mode)</p></div></div>",
  "delta_time": "<div><h4>delta_time() → {number}</h4><div class=\"description\"><p>Returns the value of Time.deltaTime in Unity ( roughly saying it's about <code>1 / instant frame rate</code> )&lt;br&gt;  \nThis should be useful when implementing timers or constant speed control in Update function.&lt;br&gt;  \nFor example:  <pre><code>function update(gameObject){  \n    const move_speed = 3;  \n    translate_world(gameObject, 0, 0, move_speed * delta_time());  \n}  </code></pre>  \nBy assigning the above code to a GameObject with <code>set_update</code>, that GameObject will move in a constant speed of 3 units along world +Z axis, ignoring the affect of unstable instant frame rate.  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see https://docs.unity3d.com/ScriptReference/Time-deltaTime.html</p></div></div>",
  "destroy": "<div><h4>destroy(gameObjectIdentifier: GameObjectIdentifier) → {void}</h4><div class=\"description\"><p>Remove a GameObject&lt;br&gt;  \nNote that this won't remove the GameObject immediately, the actual removal will happen at the end of the current main cycle loop.&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see https://docs.unity3d.com/ScriptReference/Object.Destroy.html</p></div></div>",
  "get_angular_velocity": "<div><h4>get_angular_velocity(gameObjectIdentifier: GameObjectIdentifier) → {undefined}</h4><div class=\"description\"><p>Returns the angular velocity of the rigidbody attached on the game object.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.  \n&lt;br&gt;&lt;br&gt;&lt;b&gt;2D Mode Special: &lt;/b&gt;In 2D mode there is no angular velocity on X nor Y axis, so in the first two elements for the returned array will always be zero.</p></div></div>",
  "get_key": "<div><h4>get_key(keyCode: string) → {boolean}</h4><div class=\"description\"><p>When user presses a key on the keyboard or mouse button, this function will return true in every frame that the key is still being pressed and false otherwise.  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKey.html</p></div></div>",
  "get_key_down": "<div><h4>get_key_down(keyCode: string) → {boolean}</h4><div class=\"description\"><p>When user presses a key on the keyboard or mouse button, this function will return true only at the frame when the key is just pressed down and return false afterwards.  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyDown.html</p></div></div>",
  "get_key_up": "<div><h4>get_key_up(keyCode: string) → {boolean}</h4><div class=\"description\"><p>When user releases a pressed key on the keyboard or mouse button, this function will return true only at the frame when the key is just released up and return false otherwise.  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyUp.html</p></div></div>",
  "get_main_camera_following_target": "<div><h4>get_main_camera_following_target() → {GameObjectIdentifier}</h4><div class=\"description\"><p>Get the main camera following target GameObject (an invisible GameObject) to use it to control the position of the main camera with the default camera controller.&lt;br&gt;&lt;br&gt;  \n&lt;b&gt;In 3D mode&lt;/b&gt;, the default camera controller behaves as third-person camera controller, and the center to follow is the following target GameObject.&lt;br&gt;  \n&lt;b&gt;In 2D mode&lt;/b&gt;, the default camera controller will follow the target GameObject to move, along with a position delta value that you can adjust with the arrow keys on your keyboard.&lt;br&gt;&lt;br&gt;  \nThe main camera following target GameObject is a primitive GameObject. This means that you are not allowed to destroy it and/or instantiate it during runtime. Multiple calls to this function will return GameObject identifiers that refer to the same primitive GameObject.</p></div></div>",
  "get_mass": "<div><h4>get_mass(gameObjectIdentifier: GameObjectIdentifier) → {number}</h4><div class=\"description\"><p>Returns the mass of the rigidbody attached on the game object.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "get_position": "<div><h4>get_position(gameObjectIdentifier: GameObjectIdentifier) → {undefined}</h4><div class=\"description\"><p>Returns the world position of a given GameObject</p></div></div>",
  "get_rotation_euler": "<div><h4>get_rotation_euler(gameObjectIdentifier: GameObjectIdentifier) → {undefined}</h4><div class=\"description\"><p>Returns the world Euler angle rotation of a given GameObject</p></div></div>",
  "get_scale": "<div><h4>get_scale(gameObjectIdentifier: GameObjectIdentifier) → {undefined}</h4><div class=\"description\"><p>Returns the scale of a given GameObject</p></div></div>",
  "get_velocity": "<div><h4>get_velocity(gameObjectIdentifier: GameObjectIdentifier) → {undefined}</h4><div class=\"description\"><p>Returns the velocity of the rigidbody attached on the game object.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "init_unity_academy_2d": "<div><h4>init_unity_academy_2d() → {void}</h4><div class=\"description\"><p>Load and initialize Unity Academy WebGL player and set it to 2D mode. All other functions in this module requires calling this function or init_unity_academy_3d first.&lt;br&gt;  \nI recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.</p></div></div>",
  "init_unity_academy_3d": "<div><h4>init_unity_academy_3d() → {void}</h4><div class=\"description\"><p>Load and initialize Unity Academy WebGL player and set it to 3D mode. All other functions in this module requires calling this function or init_unity_academy_2d first.&lt;br&gt;  \nI recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.</p></div></div>",
  "instantiate": "<div><h4>instantiate(prefab_name: string) → {GameObjectIdentifier}</h4><div class=\"description\"><p>Create a new GameObject from an existing Prefab  \n&lt;br&gt;&lt;b&gt;3D mode only&lt;/b&gt;</p></div></div>",
  "instantiate_sprite": "<div><h4>instantiate_sprite(sourceImageUrl: string) → {GameObjectIdentifier}</h4><div class=\"description\"><p>Create a new 2D Sprite GameObject from an online image.&lt;br&gt;  \nThe Sprite GameObject has a BoxCollider2D that matches its size by default. You may use <code>remove_collider_components</code> function to remove the default collider.&lt;br&gt;&lt;br&gt;  \nNote that Unity Academy will use a HTTP GET request to download the image, which means that the HTTP response from the URL must allows CORS.&lt;br&gt;&lt;br&gt;  \n&lt;br&gt;&lt;b&gt;2D mode only&lt;/b&gt;</p></div></div>",
  "on_collision_enter": "<div><h4>on_collision_enter(gameObjectIdentifier: GameObjectIdentifier, eventFunction: Function) → {void}</h4><div class=\"description\"><p>Set the lifecycle event function that will be called when the collider on this GameObject just starting colliding with another collider.&lt;br&gt;  \n&lt;br&gt;  \nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).&lt;br&gt;  \nFor example: <code>const myFunction = (self, other) =&gt; {...};</code>  \n&lt;br&gt;  \nNote that for collision detaction to happen, for the two colliding GameObjects, at least one GameObject should have a Rigidbody / Rigidbody2D component (called <code>apply_rigidbody</code> on the GameObject).  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html (For 3D Mode) or  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionEnter2D.html (For 2D Mode)</p></div></div>",
  "on_collision_exit": "<div><h4>on_collision_exit(gameObjectIdentifier: GameObjectIdentifier, eventFunction: Function) → {void}</h4><div class=\"description\"><p>Set the lifecycle event function that will be called when the collider on this GameObject just stops colliding with another collider.&lt;br&gt;  \n&lt;br&gt;  \nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).&lt;br&gt;  \nFor example: <code>const myFunction = (self, other) =&gt; {...};</code>  \n&lt;br&gt;  \nNote that for collision detaction to happen, for the two colliding GameObjects, at least one GameObject should have a Rigidbody / Rigidbody2D component (called <code>apply_rigidbody</code> on the GameObject).  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit.html (For 3D Mode) or  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit2D.html (For 2D Mode)</p></div></div>",
  "on_collision_stay": "<div><h4>on_collision_stay(gameObjectIdentifier: GameObjectIdentifier, eventFunction: Function) → {void}</h4><div class=\"description\"><p>Set the lifecycle event function that will be called per frame when the collider on this GameObject is colliding with another collider.&lt;br&gt;  \n&lt;br&gt;  \nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).&lt;br&gt;  \nFor example: <code>const myFunction = (self, other) =&gt; {...};</code>  \n&lt;br&gt;  \nNote that for collision detaction to happen, for the two colliding GameObjects, at least one GameObject should have a Rigidbody / Rigidbody2D component (called <code>apply_rigidbody</code> on the GameObject).  \n&lt;br&gt;  \n&lt;br&gt;  \nFor more information, see  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html (For 3D Mode) or  \n&lt;br&gt;https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionStay2D.html (For 2D Mode)</p></div></div>",
  "play_animator_state": "<div><h4>play_animator_state(gameObjectIdentifier: GameObjectIdentifier, animatorStateName: string) → {void}</h4><div class=\"description\"><p>Plays an Unity animation state with given name on the GameObject's animator. Note that not all game objects have Unity animations. You should ask the people who provided you the prefab asset bundle for available animation names assigned to the prefab.&lt;br&gt;&lt;br&gt;  \nIf you provide an invalid animator state name, this function will not take effect.&lt;br&gt;&lt;br&gt;  \n&lt;b&gt;3D mode only&lt;/b&gt;&lt;br&gt;&lt;br&gt;  \n[For Prefab Authors] Please follow these conventions if you are making humanoid prefabs (for example: any human-like characters): Name the standing animation state as \"Idle\" and name the walking animation state as \"Walk\" in Unity Animator.&lt;br&gt;</p></div></div>",
  "remove_collider_components": "<div><h4>remove_collider_components(gameObjectIdentifier: GameObjectIdentifier) → {void}</h4><div class=\"description\"><p>Removes all collider components directly attached on the given GameObject by default.&lt;br&gt;  \n&lt;br&gt;  \nYou can use this function on GameObjects those you don't want them to collide with other GameObjects.&lt;br&gt;  \nFor example, you may use this on the background image sprite GameObject in 2D scene.</p></div></div>",
  "rotate_world": "<div><h4>rotate_world(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Rotates a GameObject with given x, y and z values (Euler angle)</p></div></div>",
  "same_gameobject": "<div><h4>same_gameobject(first: GameObjectIdentifier, second: GameObjectIdentifier) → {boolean}</h4><div class=\"description\"><p>Determine whether two GameObject identifiers refers to the same GameObject.</p></div></div>",
  "set_angular_drag": "<div><h4>set_angular_drag(gameObjectIdentifier: GameObjectIdentifier, value: number) → {void}</h4><div class=\"description\"><p>Set the angular drag (similar to an air resistance that affects angular velocity) the rigidbody attached on the game object.&lt;br&gt;  \nBy default the angular drag is 0.05  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "set_angular_velocity": "<div><h4>set_angular_velocity(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Set the angular velocity of the rigidbody attached on the game object.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.  \n&lt;br&gt;&lt;br&gt;&lt;b&gt;2D Mode Special: &lt;/b&gt;In 2D mode there is no angular velocity on X nor Y axis, so the value of the first two parameters for this function is ignored.</p></div></div>",
  "set_drag": "<div><h4>set_drag(gameObjectIdentifier: GameObjectIdentifier, value: number) → {void}</h4><div class=\"description\"><p>Set the drag (similar to air resistance) the rigidbody attached on the game object.&lt;br&gt;  \nBy default the drag is zero  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "set_mass": "<div><h4>set_mass(gameObjectIdentifier: GameObjectIdentifier, mass: number) → {void}</h4><div class=\"description\"><p>Set the mass of the rigidbody attached on the game object.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "set_position": "<div><h4>set_position(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Set the world position of a given GameObject</p></div></div>",
  "set_rotation_euler": "<div><h4>set_rotation_euler(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Set the world rotation of a given GameObject with given Euler angle rotation.</p></div></div>",
  "set_scale": "<div><h4>set_scale(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Set the scale of a given GameObject</p></div></div>",
  "set_start": "<div><h4>set_start(gameObjectIdentifier: GameObjectIdentifier, startFunction: Function) → {void}</h4><div class=\"description\"><p>Set the Start function of a given GameObject</p></div></div>",
  "set_update": "<div><h4>set_update(gameObjectIdentifier: GameObjectIdentifier, updateFunction: Function) → {void}</h4><div class=\"description\"><p>Set the Update function of a given GameObject</p></div></div>",
  "set_use_gravity": "<div><h4>set_use_gravity(gameObjectIdentifier: GameObjectIdentifier, useGravity: boolean) → {void}</h4><div class=\"description\"><p>Set whether the rigidbody attached on the game object should calculate for gravity.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "set_velocity": "<div><h4>set_velocity(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Set the (linear) velocity of the rigidbody attached on the game object.  \n&lt;br&gt;&lt;br&gt;Usage of all physics functions under the Physics - Rigidbody category requires calling <code>apply_rigidbody</code> first on the applied game objects.</p></div></div>",
  "translate_world": "<div><h4>translate_world(gameObjectIdentifier: GameObjectIdentifier, x: number, y: number, z: number) → {void}</h4><div class=\"description\"><p>Moves a GameObject with given x, y and z values</p></div></div>"
}