{
	"id": 0,
	"name": "Source Academy Modules",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 63,
			"name": "binary_tree",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "The `binary_tree` Source Module provides functions for the interaction with binary trees, as covered the textbook\n[Structure and Interpretation of Computer Programs, JavaScript Adaptation (SICP JS)](https://sicp.comp.nus.edu.sg/)\nin [section 2.3.3 Example: Representing Sets](https://sicp.comp.nus.edu.sg/chapters/37).\nClick on a name on the left to see how they are defined and used."
			},
			"originalName": "binary_tree/functions",
			"children": [
				{
					"id": 64,
					"name": "make_empty_tree",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "binary_tree/functions.ts",
							"line": 19,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "make_empty_tree",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an empty binary tree, represented by the empty list null",
								"returns": "An empty binary tree\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\ndisplay(make_empty_tree()); // Shows \"[]\" in the REPL\n```"
									}
								]
							},
							"type": {
								"type": "reference",
								"name": "BinaryTree"
							}
						}
					]
				},
				{
					"id": 66,
					"name": "make_tree",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "binary_tree/functions.ts",
							"line": 35,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 67,
							"name": "make_tree",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a binary tree node composed of the specified left subtree, value and right subtree.",
								"returns": "A binary tree\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\nconst tree = make_tree(1, make_empty_tree(), make_empty_tree());\ndisplay(tree); // Shows \"[null, 1, null]\" in the REPL\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 68,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to be stored in the node"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 69,
									"name": "left",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Left subtree of the node"
									},
									"type": {
										"type": "reference",
										"name": "BinaryTree"
									}
								},
								{
									"id": 70,
									"name": "right",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Right subtree of the node"
									},
									"type": {
										"type": "reference",
										"name": "BinaryTree"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "BinaryTree"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						64,
						66
					]
				}
			],
			"sources": [
				{
					"fileName": "binary_tree/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 71,
			"name": "curve",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "drawing *curves*, i.e. collections of *points*, on a canvas in a tools tab",
				"text": "A *point* is defined by its coordinates (x, y and z), and the color assigned to\nit (r, g, and b). A few constructors for points is given, for example\n`make_color_point`. Selectors allow access to the coordinates and color\ncomponents, for example `x_of`.\n\nA *curve* is a\nunary function which takes a number argument within the unit interval `[0,1]`\nand returns a point. If `C` is a curve, then the starting point of the curve\nis always `C(0)`, and the ending point is always `C(1)`.\n\nA *curve transformation* is a function that takes a curve as argument and\nreturns a curve. Examples of curve transformations are `scale` and `translate`.\n\nA *curve drawer* is function that takes a number argument and returns\na function that takes a curve as argument and visualises it in the output screen is\nshown in the Source Academy in the tab with the \"Curves Canvas\" icon (image).\nThe following [example](https://share.sourceacademy.org/unitcircle) uses\nthe curve drawer `draw_connected_full_view` to display a curve called\n`unit_circle`.\n```\nimport { make_point, draw_connected_full_view } from \"curve\";\nfunction unit_circle(t) {\n  return make_point(math_sin(2 * math_PI * t),\n                    math_cos(2 * math_PI * t));\n}\ndraw_connected_full_view(100)(unit_circle);\n```\ndraws a full circle in the display tab.\n",
				"tags": [
					{
						"tag": "author",
						"text": "Lee Zheng Han"
					},
					{
						"tag": "author",
						"text": "Ng Yong Xiang\n"
					}
				]
			},
			"originalName": "curve/functions",
			"children": [
				{
					"id": 191,
					"name": "arc",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 739,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 192,
							"name": "arc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a curve: a function from a fraction t to a point. The points\nlie on the right half of the unit circle. They start at Point (0,1) when t is\n0. When t is 0.5, they reach Point (1,0), when t is 1, they reach Point\n(0, -1).",
								"returns": "Point in the arc at t\n"
							},
							"parameters": [
								{
									"id": 193,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 147,
					"name": "b_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 446,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "b_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves the blue component of a given Point.",
								"returns": "Blue component of the Point",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_color_point(1, 2, 3, 50, 100, 150);\nb_of(point); // Returns 150\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 149,
									"name": "pt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 178,
					"name": "connect_ends",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 682,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 179,
							"name": "connect_ends",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a binary Curve operator: It takes two Curves as arguments\nand returns a new Curve. The two Curves are combined by using the full first\nCurve for the first portion of the result and by using the full second Curve\nfor the second portion of the result. The second Curve is translated such\nthat its point at fraction 0 is the same as the Point of the first Curve at\nfraction 1.",
								"returns": "result Curve\n"
							},
							"parameters": [
								{
									"id": 180,
									"name": "curve1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "first Curve"
									},
									"type": {
										"type": "reference",
										"name": "Curve"
									}
								},
								{
									"id": 181,
									"name": "curve2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "second Curve"
									},
									"type": {
										"type": "reference",
										"name": "Curve"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Curve"
							}
						}
					]
				},
				{
					"id": 174,
					"name": "connect_rigidly",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 666,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 175,
							"name": "connect_rigidly",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a binary Curve operator: It takes two Curves as arguments\nand returns a new Curve. The two Curves are combined by using the full first\nCurve for the first portion of the result and by using the full second Curve\nfor the second portion of the result. The second Curve is not changed, and\ntherefore there might be a big jump in the middle of the result Curve.",
								"returns": "result Curve\n"
							},
							"parameters": [
								{
									"id": 176,
									"name": "curve1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "first Curve"
									},
									"type": {
										"type": "reference",
										"name": "Curve"
									}
								},
								{
									"id": 177,
									"name": "curve2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "second Curve"
									},
									"type": {
										"type": "reference",
										"name": "Curve"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Curve"
							}
						}
					]
				},
				{
					"id": 90,
					"name": "draw_3D_connected",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 177,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 91,
							"name": "draw_3D_connected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points and connecting each pair with\na line. The parts between (0,0,0) and (1,1,1) of the resulting Drawing are\nshown within the unit cube.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_3D_connected(100)(t => make_3D_point(t, t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 92,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 93,
					"name": "draw_3D_connected_full_view",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 195,
							"character": 43
						}
					],
					"signatures": [
						{
							"id": 94,
							"name": "draw_3D_connected_full_view",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points and connecting each pair with\na line. The Drawing is translated and stretched/shrunk to show the full\ncurve and maximize its width and height within the cube.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_3D_connected_full_view(100)(t => make_3D_point(t, t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 95,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 96,
					"name": "draw_3D_connected_full_view_proportional",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 213,
							"character": 56
						}
					],
					"signatures": [
						{
							"id": 97,
							"name": "draw_3D_connected_full_view_proportional",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points and connecting each pair with\na line. The Drawing is translated and scaled proportionally with its size\nmaximized to fit entirely inside the cube.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_3D_connected_full_view_proportional(100)(t => make_3D_point(t, t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 98,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 99,
					"name": "draw_3D_points",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 233,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 100,
							"name": "draw_3D_points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points. The Drawing consists of\nisolated points, and does not connect them. The parts between (0,0,0)\nand (1,1,1) of the resulting Drawing are shown within the unit cube.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_3D_points(100)(t => make_3D_point(t, t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 101,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 102,
					"name": "draw_3D_points_full_view",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 251,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 103,
							"name": "draw_3D_points_full_view",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points. The Drawing consists of\nisolated points, and does not connect them. The Drawing is translated and\nstretched/shrunk to maximize its size to fit entirely inside the cube.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_3D_points_full_view(100)(t => make_3D_point(t, t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 104,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 105,
					"name": "draw_3D_points_full_view_proportional",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 269,
							"character": 53
						}
					],
					"signatures": [
						{
							"id": 106,
							"name": "draw_3D_points_full_view_proportional",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given 3D Curve into a Drawing, by sampling\nthe 3D Curve at `num` sample points. The Drawing consists of\nisolated points, and does not connect them. The Drawing is translated and\nscaled proportionally with its size maximized to fit entirely inside the cube.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_3D_points_full_view_proportional(100)(t => make_3D_point(t, t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 107,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 72,
					"name": "draw_connected",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 63,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 73,
							"name": "draw_connected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line.\nThe parts between (0,0) and (1,1) of the resulting Drawing are shown in the window.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_connected(100)(t => make_point(t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 74,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 75,
					"name": "draw_connected_full_view",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 81,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 76,
							"name": "draw_connected_full_view",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line. The Drawing is\ntranslated and stretched/shrunk to show the full curve and maximize its width\nand height, with some padding.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_connected_full_view(100)(t => make_point(t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 77,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 78,
					"name": "draw_connected_full_view_proportional",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 99,
							"character": 53
						}
					],
					"signatures": [
						{
							"id": 79,
							"name": "draw_connected_full_view_proportional",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points and connecting each pair with a line. The Drawing\nis translated and scaled proportionally to show the full curve and maximize\nits size, with some padding.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_connected_full_view_proportional(100)(t => make_point(t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 80,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 81,
					"name": "draw_points",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 119,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 82,
							"name": "draw_points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points. The Drawing consists of isolated\npoints, and does not connect them. The parts between (0,0) and (1,1) of the\nresulting Drawing are shown in the window.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_points(100)(t => make_point(t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 83,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1,there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 84,
					"name": "draw_points_full_view",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 138,
							"character": 37
						}
					],
					"signatures": [
						{
							"id": 85,
							"name": "draw_points_full_view",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points. The Drawing consists of isolated\npoints, and does not connect them. The Drawing is translated and\nstretched/shrunk to show the full curve and maximize its width and height,\nwith some padding.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_points_full_view(100)(t => make_point(t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 86,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 87,
					"name": "draw_points_full_view_proportional",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 157,
							"character": 50
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "draw_points_full_view_proportional",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a function that turns a given Curve into a Drawing, by sampling the\nCurve at `num` sample points. The Drawing consists of isolated\npoints, and does not connect them. The Drawing is translated and scaled\nproportionally with its size maximized to fit entirely inside the window,\nwith some padding.",
								"returns": "function of type Curve → Drawing",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\ndraw_points_full_view_proportional(100)(t => make_point(t, t));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 89,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "determines the number of points, lower than 65535, to be sampled.\nIncluding 0 and 1, there are `num + 1` evenly spaced sample points"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "RenderFunction"
							}
						}
					]
				},
				{
					"id": 144,
					"name": "g_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 431,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 145,
							"name": "g_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves the green component of a given Point.",
								"returns": "Green component of the Point",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_color_point(1, 2, 3, 50, 100, 150);\ng_of(point); // Returns 100\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 146,
									"name": "pt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 150,
					"name": "invert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 459,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 151,
							"name": "invert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a Curve transformation: a function from a Curve to a Curve.\nThe points of the result Curve are the same points as the points of the\noriginal Curve, but in reverse: The result Curve applied to 0 is the original\nCurve applied to 1 and vice versa.",
								"returns": "result Curve\n"
							},
							"parameters": [
								{
									"id": 152,
									"name": "curve",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Curve"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Curve"
							}
						}
					]
				},
				{
					"id": 124,
					"name": "make_3D_color_point",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 349,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 125,
							"name": "make_3D_color_point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a 3D color Point with given x, y and z coordinates, and RGB values\nranging from 0 to 255. Any input lower than 0 for RGB will be rounded up to\n0, and any input higher than 255 will be rounded down to 255.",
								"returns": "with x, y and z as coordinates, and r, g and b as RGB values",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst redPoint = make_color_point(0.5, 0.5, 0.5, 255, 0, 0);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 126,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 127,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 128,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "z-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 129,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "red component of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 130,
									"name": "g",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "green component of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 131,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "blue component of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 112,
					"name": "make_3D_point",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 302,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 113,
							"name": "make_3D_point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a 3D Point with given x, y and z coordinates.",
								"returns": "with x, y and z as coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_3D_point(0.5, 0.5, 0.5);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 114,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 115,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 116,
									"name": "z",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "z-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 117,
					"name": "make_color_point",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 322,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 118,
							"name": "make_color_point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a color Point with given x and y coordinates, and RGB values ranging\nfrom 0 to 255. Any input lower than 0 for RGB will be rounded up to 0, and\nany input higher than 255 will be rounded down to 255.",
								"returns": "with x and y as coordinates, and r, g and b as RGB values",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst redPoint = make_color_point(0.5, 0.5, 255, 0, 0);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 119,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 120,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 121,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "red component of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 122,
									"name": "g",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "green component of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 123,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "blue component of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 108,
					"name": "make_point",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 286,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 109,
							"name": "make_point",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a Point with given x and y coordinates.",
								"returns": "with x and y as coordinates",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_point(0.5, 0.5);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 110,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 111,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y-coordinate of new point"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 171,
					"name": "put_in_standard_position",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 637,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "put_in_standard_position",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a Curve transformation: It takes a Curve as argument and\nreturns a new Curve, as follows. A Curve is in standard position if it\nstarts at (0,0) ends at (1,0). This function puts the given Curve in\nstandard position by rigidly translating it so its start Point is at the\norigin (0,0), then rotating it about the origin to put its endpoint on the\nx axis, then scaling it to put the endpoint at (1,0). Behavior is unspecified\non closed Curves where start-point equal end-point.",
								"returns": "result Curve\n"
							},
							"parameters": [
								{
									"id": 173,
									"name": "curve",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Curve"
									},
									"type": {
										"type": "reference",
										"name": "Curve"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Curve"
							}
						}
					]
				},
				{
					"id": 141,
					"name": "r_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 416,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 142,
							"name": "r_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves the red component of a given Point.",
								"returns": "Red component of the Point",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_color_point(1, 2, 3, 50, 100, 150);\nr_of(point); // Returns 50\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 143,
									"name": "pt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 158,
					"name": "rotate_around_origin",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 511,
							"character": 36
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "rotate_around_origin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function takes 3 angles, a, b and c in radians as parameter\nand returns a Curve transformation: a function that takes a Curve as argument\nand returns a new Curve, which is the original Curve rotated\nextrinsically with Euler angles (a, b, c) about x, y,\nand z axes.",
								"returns": "function that takes a Curve and returns a Curve\n"
							},
							"parameters": [
								{
									"id": 160,
									"name": "theta1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 161,
									"name": "theta2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 162,
									"name": "theta3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CurveTransformer"
							}
						}
					]
				},
				{
					"id": 163,
					"name": "scale",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 594,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 164,
							"name": "scale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function takes scaling factors `a`, `b` and\n`c`, as arguments and returns a\nCurve transformation that scales a given Curve by `a` in\nx-direction, `b` in y-direction and `c` in z-direction.",
								"returns": "function that takes a Curve and returns a Curve\n"
							},
							"parameters": [
								{
									"id": 165,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor in x-direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 166,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor in y-direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 167,
									"name": "c",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor in z-direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CurveTransformer"
							}
						}
					]
				},
				{
					"id": 168,
					"name": "scale_proportional",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 621,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 169,
							"name": "scale_proportional",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function takes a scaling factor s argument and returns a Curve\ntransformation that scales a given Curve by s in x, y and z direction.",
								"returns": "function that takes a Curve and returns a Curve\n"
							},
							"parameters": [
								{
									"id": 170,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CurveTransformer"
							}
						}
					]
				},
				{
					"id": 153,
					"name": "translate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 475,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 154,
							"name": "translate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function returns a Curve transformation: It takes an x-value x0, a\ny-value y0 and a z-value z0, as arguments and\nreturns a Curve transformation that takes a Curve as argument and returns a\nnew Curve, by translating the original by x0 in x-direction, y0 in\ny-direction and z0 in z-direction.",
								"returns": "Curve transformation\n"
							},
							"parameters": [
								{
									"id": 155,
									"name": "x0",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x-value"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 156,
									"name": "y0",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y-value"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 157,
									"name": "z0",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "z-value"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CurveTransformer"
							}
						}
					]
				},
				{
					"id": 182,
					"name": "unit_circle",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 703,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 183,
							"name": "unit_circle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a curve: a function from a fraction t to a point. The points\nlie on the unit circle. They start at Point (1,0) when t is 0. When t is\n0.25, they reach Point (0,1), when t is 0.5, they reach Point (-1, 0), etc.",
								"returns": "Point on the circle at t\n"
							},
							"parameters": [
								{
									"id": 184,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 185,
					"name": "unit_line",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 714,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 186,
							"name": "unit_line",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a curve: a function from a fraction t to a point. The\nx-coordinate at franction t is t, and the y-coordinate is 0.",
								"returns": "Point on the line at t\n"
							},
							"parameters": [
								{
									"id": 187,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Point"
							}
						}
					]
				},
				{
					"id": 188,
					"name": "unit_line_at",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 726,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 189,
							"name": "unit_line_at",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This function is a Curve generator: it takes a number and returns a\nhorizontal curve. The number is a y-coordinate, and the Curve generates only\npoints with the given y-coordinate.",
								"returns": "horizontal Curve\n"
							},
							"parameters": [
								{
									"id": 190,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Curve"
							}
						}
					]
				},
				{
					"id": 132,
					"name": "x_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 371,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "x_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves the x-coordinate of a given Point.",
								"returns": "x-coordinate of the Point",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_color_point(1, 2, 3, 50, 100, 150);\nx_of(point); // Returns 1\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 134,
									"name": "pt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 135,
					"name": "y_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 386,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 136,
							"name": "y_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves the y-coordinate of a given Point.",
								"returns": "y-coordinate of the Point",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_color_point(1, 2, 3, 50, 100, 150);\ny_of(point); // Returns 2\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 137,
									"name": "pt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 138,
					"name": "z_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "curve/functions.ts",
							"line": 401,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 139,
							"name": "z_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Retrieves the z-coordinate of a given Point.",
								"returns": "z-coordinate of the Point",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst point = make_color_point(1, 2, 3, 50, 100, 150);\nz_of(point); // Returns 3\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 140,
									"name": "pt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Point"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						191,
						147,
						178,
						174,
						90,
						93,
						96,
						99,
						102,
						105,
						72,
						75,
						78,
						81,
						84,
						87,
						144,
						150,
						124,
						112,
						117,
						108,
						171,
						141,
						158,
						163,
						168,
						153,
						182,
						185,
						188,
						132,
						135,
						138
					]
				}
			],
			"sources": [
				{
					"fileName": "curve/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 457,
			"name": "game",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "Game library that translates Phaser 3 API into Source.",
				"text": "More in-depth explanation of the Phaser 3 API can be found at\nPhaser 3 documentation itself.\n\nFor Phaser 3 API Documentation, check:\nhttps://photonstorm.github.io/phaser3-docs/\n",
				"tags": [
					{
						"tag": "author",
						"text": "Anthony Halim"
					},
					{
						"tag": "author",
						"text": "Chi Xu"
					},
					{
						"tag": "author",
						"text": "Chong Sia Tiffany"
					},
					{
						"tag": "author",
						"text": "Gokul Rajiv\n"
					}
				]
			},
			"originalName": "game/functions",
			"children": [
				{
					"id": 550,
					"name": "add",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1073,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 551,
							"name": "add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the object to the scene. Only objects added to the scene\nwill appear."
							},
							"parameters": [
								{
									"id": 552,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "game object to be added\n"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 653,
					"name": "add_keyboard_listener",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1478,
							"character": 37
						}
					],
					"signatures": [
						{
							"id": 654,
							"name": "add_keyboard_listener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attach a listener to the object. The callback will be executed\nwhen the event is emitted.\nMutate the object.",
								"text": "For all available events, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Input.Events.html\n\nFor list of keycodes, see:\nhttps://github.com/photonstorm/phaser/blob/v3.22.0/src/input/keyboard/keys/KeyCodes.js\n",
								"returns": "listener game object\n"
							},
							"parameters": [
								{
									"id": 655,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "keyboard key to trigger listener"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 656,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the event name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 657,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "listener function, executed on event"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GameObject"
							}
						}
					]
				},
				{
					"id": 648,
					"name": "add_listener",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1454,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 649,
							"name": "add_listener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attach a listener to the object. The callback will be executed\nwhen the event is emitted.\nMutate the object.",
								"text": "For all available events, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Input.Events.html\n",
								"returns": "listener game object\n"
							},
							"parameters": [
								{
									"id": 650,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be added to"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 651,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the event name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 652,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "listener function, executed on event"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 600,
					"name": "add_to_container",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1272,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 601,
							"name": "add_to_container",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add the given game object to the container.\nMutates the container.",
								"returns": "container object\n"
							},
							"parameters": [
								{
									"id": 602,
									"name": "container",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "container object"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 603,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "game object to add to the container"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 644,
					"name": "add_tween",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1432,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 645,
							"name": "add_tween",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a tween to the object and plays it.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 646,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be added to"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 647,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "tween config"
									},
									"type": {
										"type": "reference",
										"name": "ObjectConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GameObject"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 557,
					"name": "create_anim",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1104,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 558,
							"name": "create_anim",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new animation and add it to the available animations.\nAnimations are global i.e. once created, it can be used anytime, anywhere.",
								"text": "NOTE: Anims DO NOT need to be added into the scene to be used.\nIt is automatically added to the scene when it is created.\n\nWill return true if the animation key is valid\n(key is specified within the anim_config); false if the key\nis already in use.\n",
								"returns": "true if animation is successfully created, false otherwise\n"
							},
							"parameters": [
								{
									"id": 559,
									"name": "anim_config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ObjectConfig"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 503,
					"name": "create_anim_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 914,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 504,
							"name": "create_anim_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create anims config, can be used to configure anims",
								"text": "For more details about the config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Animations.html#.Animation\n",
								"returns": "animation config\n"
							},
							"parameters": [
								{
									"id": 505,
									"name": "anims_key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key that the animation will be associated with"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 506,
									"name": "anim_frames",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "data used to generate the frames for animation"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ObjectConfig"
										}
									}
								},
								{
									"id": 507,
									"name": "frame_rate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "frame rate of playback in frames per second"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "24"
								},
								{
									"id": 508,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "how long the animation should play in seconds.\n                If null, will be derived from frame_rate"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "null"
								},
								{
									"id": 509,
									"name": "repeat",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "number of times to repeat the animation, -1 for infinity"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "-1"
								},
								{
									"id": 510,
									"name": "yoyo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "should the animation yoyo (reverse back down to the start)"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 511,
									"name": "show_on_start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "should the sprite be visible when the anims start?"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								},
								{
									"id": 512,
									"name": "hide_on_complete",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "should the sprite be not visible when the anims finish?"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 513,
					"name": "create_anim_frame_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 940,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 514,
							"name": "create_anim_frame_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create animation frame config, can be used to configure a specific frame\nwithin an animation.",
								"text": "The key should refer to an image that is already loaded.\nTo make frame_config from spritesheet based on its frames,\nuse create_anim_spritesheet_frame_configs instead.\n",
								"returns": "animation frame config\n"
							},
							"parameters": [
								{
									"id": 515,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key that is associated with the sprite at this frame"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 516,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration, in ms, of this frame of the animation"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 517,
									"name": "visible",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "should the parent object be visible during this frame?"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 518,
					"name": "create_anim_spritesheet_frame_configs",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 964,
							"character": 53
						}
					],
					"signatures": [
						{
							"id": 519,
							"name": "create_anim_spritesheet_frame_configs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create list of animation frame config, can be used directly as part of\nanim_config's `frames` parameter.",
								"text": "This function will generate list of frame configs based on the\nspritesheet_config attached to the associated spritesheet.\nThis function requires that the given key is a spritesheet key\ni.e. a key associated with loaded spritesheet, loaded in using\nload_spritesheet function.\n\nWill return empty frame configs if key is not associated with\na spritesheet.\n",
								"returns": "animation frame configs\n"
							},
							"parameters": [
								{
									"id": 520,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key associated with spritesheet"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ObjectConfig"
										}
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 569,
					"name": "create_award",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1160,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 570,
							"name": "create_award",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create an award using the key associated with the award.\nThe award key can be obtained from the Awards Hall or\nAwards menu, after attaining the award.",
								"text": "Valid award will have an on-hover VERIFIED tag to distinguish\nit from images created by create_image.\n\nIf student does not possess the award, this function will\nreturn a untagged, default image.\n",
								"returns": "award game object\n"
							},
							"parameters": [
								{
									"id": 571,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x position of the image. 0 is at the left side"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 572,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y position of the image. 0 is at the top side"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 573,
									"name": "award_key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key for award"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GameObject"
							}
						}
					]
				},
				{
					"id": 465,
					"name": "create_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 782,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 466,
							"name": "create_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transforms the given list into an object config. The list follows\nthe format of list([key1, value1], [key2, value2]).",
								"text": "e.g list([\"alpha\", 0], [\"duration\", 1000])\n",
								"returns": "object config\n"
							},
							"parameters": [
								{
									"id": 467,
									"name": "lst",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the list to be turned into object config."
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 596,
					"name": "create_container",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1260,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 597,
							"name": "create_container",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a container object. Container is able to contain any other game object,\nand the positions of contained game object will be relative to the container.",
								"text": "Rendering the container as visible or invisible will also affect the contained\ngame object.\n\nContainer can also contain another container.\n\n0, 0 is located at the top, left hand side.\n\nFor more details about container object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Container.html\n",
								"returns": "container object\n"
							},
							"parameters": [
								{
									"id": 598,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x position of the container"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 599,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y position of the container"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "GameObject"
							}
						}
					]
				},
				{
					"id": 588,
					"name": "create_ellipse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1229,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 589,
							"name": "create_ellipse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create an ellipse object.",
								"returns": "ellipse object\n"
							},
							"parameters": [
								{
									"id": 590,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x coordinate of the centre of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 591,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y coordinate of the centre of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 592,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "width of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 593,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "height of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 594,
									"name": "fill",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "colour fill, in hext e.g 0xffffff"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 595,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "value between 0 and 1 to denote alpha"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "reference",
								"name": "GameObject"
							}
						}
					]
				},
				{
					"id": 564,
					"name": "create_image",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1134,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 565,
							"name": "create_image",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create an image using the key associated with a loaded image.\nIf key is not associated with any loaded image, throws error.",
								"text": "0, 0 is located at the top, left hand side.\n",
								"returns": "image game object\n"
							},
							"parameters": [
								{
									"id": 566,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x position of the image. 0 is at the left side"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 567,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y position of the image. 0 is at the top side"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 568,
									"name": "asset_key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key to loaded image"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 476,
					"name": "create_interactive_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 828,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 477,
							"name": "create_interactive_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create interactive config object, can be used to configure interactive settings.",
								"text": "For more details about interactive config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Input.html#.InputConfiguration\n",
								"returns": "interactive config\n"
							},
							"parameters": [
								{
									"id": 478,
									"name": "draggable",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object will be set draggable"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 479,
									"name": "use_hand_cursor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "if true, pointer will be set to 'pointer' when a pointer is over it"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 480,
									"name": "pixel_perfect",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "pixel perfect function will be set for the hit area. Only works for texture based object"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 481,
									"name": "alpha_tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "if pixel_perfect is set, this is the alpha tolerance threshold value used in the callback"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 580,
					"name": "create_rect",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1205,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 581,
							"name": "create_rect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a rectangle object.",
								"text": "0, 0 is located at the top, left hand side.\n",
								"returns": "rectangle object\n"
							},
							"parameters": [
								{
									"id": 582,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x coordinate of the top, left corner posiiton"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 583,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y coordinate of the top, left corner position"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 584,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "width of rectangle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 585,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "height of rectangle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 586,
									"name": "fill",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "colour fill, in hext e.g 0xffffff"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 587,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "value between 0 and 1 to denote alpha"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "reference",
								"name": "GameObject"
							}
						}
					]
				},
				{
					"id": 482,
					"name": "create_sound_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 852,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 483,
							"name": "create_sound_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create sound config object, can be used to configure sound settings.",
								"text": "For more details about sound config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Sound.html#.SoundConfig\n",
								"returns": "sound config\n"
							},
							"parameters": [
								{
									"id": 484,
									"name": "mute",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "whether the sound should be muted or not"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 485,
									"name": "volume",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "value between 0(silence) and 1(full volume)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 486,
									"name": "rate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the speed at which the sound is played"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								},
								{
									"id": 487,
									"name": "detune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "detuning of the sound, in cents"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 488,
									"name": "seek",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "position of playback for the sound, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 489,
									"name": "loop",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "whether or not the sound should loop"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 490,
									"name": "delay",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "time, in seconds, that elapse before the sound actually starts"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 521,
					"name": "create_spritesheet_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 981,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 522,
							"name": "create_spritesheet_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create spritesheet config, can be used to configure the frames within the\nspritesheet. Can be used as config at load_spritesheet.",
								"returns": "spritesheet config\n"
							},
							"parameters": [
								{
									"id": 523,
									"name": "frame_width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "width of frame in pixels"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 524,
									"name": "frame_height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "height of frame in pixels"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 525,
									"name": "start_frame",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "first frame to start parsing from"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 526,
									"name": "margin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "margin in the image; this is the space around the edge of the frames"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 527,
									"name": "spacing",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the spacing between each frame in the image"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 574,
					"name": "create_text",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1181,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 575,
							"name": "create_text",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a text object.",
								"text": "0, 0 is located at the top, left hand side.\n",
								"returns": "text game object\n"
							},
							"parameters": [
								{
									"id": 576,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "x position of the text"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 577,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "y position of the text"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 578,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "text to be shown"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 579,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "text configuration to be used"
									},
									"type": {
										"type": "reference",
										"name": "ObjectConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"name": "GameObject"
							}
						}
					]
				},
				{
					"id": 468,
					"name": "create_text_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 805,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 469,
							"name": "create_text_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create text config object, can be used to stylise text object.",
								"text": "font_family: for available font_family, see:\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-family#Valid_family_names\n\nalign: must be either 'left', 'right', 'center', or 'justify'\n\nFor more details about text config, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.GameObjects.Text.html#.TextStyle\n",
								"returns": "text config\n"
							},
							"parameters": [
								{
									"id": 470,
									"name": "font_family",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "font to be used"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'Courier'"
								},
								{
									"id": 471,
									"name": "font_size",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "size of font, must be appended with 'px' e.g. '16px'"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'16px'"
								},
								{
									"id": 472,
									"name": "color",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "colour of font, in hex e.g. '#fff'"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'#fff'"
								},
								{
									"id": 473,
									"name": "stroke",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "colour of stroke, in hex e.g. '#fff'"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'#fff'"
								},
								{
									"id": 474,
									"name": "stroke_thickness",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "thickness of stroke"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 475,
									"name": "align",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "text alignment"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'left'"
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 491,
					"name": "create_tween_config",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 882,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 492,
							"name": "create_tween_config",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create tween config object, can be used to configure tween settings.",
								"text": "For more details about tween config object, see:\nhttps://photonstorm.github.io/phaser3-docs/Phaser.Types.Tweens.html#.TweenBuilderConfig\n",
								"returns": "tween config\n"
							},
							"parameters": [
								{
									"id": 493,
									"name": "target_prop",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "target to tween, e.g. x, y, alpha"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "'x'"
								},
								{
									"id": 494,
									"name": "target_value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the property value to tween to"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									"defaultValue": "0"
								},
								{
									"id": 495,
									"name": "delay",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "time in ms/frames before tween will start"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 496,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration of tween in ms/frames, exclude yoyos or repeats"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1000"
								},
								{
									"id": 497,
									"name": "ease",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ease function to use, e.g. 'Power0', 'Power1', 'Power2'"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Function"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"defaultValue": "'Power0'"
								},
								{
									"id": 498,
									"name": "on_complete",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "function to execute when tween completes"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 499,
									"name": "yoyo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "if set to true, once tween complete, reverses the values incrementally to get back to the starting tween values"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 500,
									"name": "loop",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "number of times the tween should loop, or -1 to loop indefinitely"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 501,
									"name": "loop_delay",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The time the tween will pause before starting either a yoyo or returning to the start for a repeat"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0"
								},
								{
									"id": 502,
									"name": "on_loop",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "function to execute each time the tween loops"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ObjectConfig"
							}
						}
					]
				},
				{
					"id": 604,
					"name": "destroy_obj",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1288,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 605,
							"name": "destroy_obj",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Destroy the given game object. Destroyed game object\nis removed from the scene, and all of its listeners\nis also removed."
							},
							"parameters": [
								{
									"id": 606,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "game object itself\n"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 534,
					"name": "get_screen_display_height",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1025,
							"character": 41
						}
					],
					"signatures": [
						{
							"id": 535,
							"name": "get_screen_display_height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get game screen display height (accounting window size).",
								"returns": "screen display height\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 532,
					"name": "get_screen_display_width",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1016,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 533,
							"name": "get_screen_display_width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get game screen display width (accounting window size).",
								"returns": "screen display width\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 530,
					"name": "get_screen_height",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1007,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 531,
							"name": "get_screen_height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get in-game screen height.",
								"returns": "screen height\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 528,
					"name": "get_screen_width",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 998,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 529,
							"name": "get_screen_width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get in-game screen width.",
								"returns": "screen width\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 536,
					"name": "load_image",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1038,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 537,
							"name": "load_image",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Load the image asset into the scene for use. All images\nmust be loaded before used in create_image."
							},
							"parameters": [
								{
									"id": 538,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key to be associated with the image"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 539,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "path to the image\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 540,
					"name": "load_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1047,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 541,
							"name": "load_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Load the sound asset into the scene for use. All sound\nmust be loaded before used in play_sound."
							},
							"parameters": [
								{
									"id": 542,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key to be associated with the sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 543,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "path to the sound\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 544,
					"name": "load_spritesheet",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1057,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 545,
							"name": "load_spritesheet",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Load the spritesheet into the scene for use. All spritesheet must\nbe loaded before used in create_image."
							},
							"parameters": [
								{
									"id": 546,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key associated with the spritesheet"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 547,
									"name": "url",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "path to the sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 548,
									"name": "spritesheet_config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "config to determines frames within the spritesheet\n"
									},
									"type": {
										"type": "reference",
										"name": "ObjectConfig"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 549,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {}
								}
							}
						}
					]
				},
				{
					"id": 560,
					"name": "play_anim_on_image",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1114,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 561,
							"name": "play_anim_on_image",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Start playing the given animation on image game object."
							},
							"parameters": [
								{
									"id": 562,
									"name": "image",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "image game object"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 563,
									"name": "anims_key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key associated with an animation\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 553,
					"name": "play_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1086,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 554,
							"name": "play_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Play the sound associated with the key.\nThrows error if key is non-existent."
							},
							"parameters": [
								{
									"id": 555,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "key to the sound to be played"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 556,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "sound config to be used\n"
									},
									"type": {
										"type": "reference",
										"name": "ObjectConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 462,
					"name": "prepend_remote_url",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 769,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 463,
							"name": "prepend_remote_url",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Prepend the given asset key with the remote path (S3 path).",
								"returns": "prepended path\n"
							},
							"parameters": [
								{
									"id": 464,
									"name": "asset_key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 658,
					"name": "remove_listener",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1492,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 659,
							"name": "remove_listener",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deactivate and remove listener.",
								"returns": "if successful\n"
							},
							"parameters": [
								{
									"id": 660,
									"name": "listener",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 612,
					"name": "set_alpha",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1315,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 613,
							"name": "set_alpha",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the alpha of the object.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 614,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 615,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new alpha"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 607,
					"name": "set_display_size",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1299,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 608,
							"name": "set_display_size",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the display size of the object.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 609,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 610,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new display width size"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 611,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new display height size"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 639,
					"name": "set_flip",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1416,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 640,
							"name": "set_flip",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the horizontal and flipped state of the object.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 641,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "game object itself"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 642,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to flip in the horizontal state"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 643,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "to flip in the vertical state"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 616,
					"name": "set_interactive",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1333,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 617,
							"name": "set_interactive",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the interactivity of the object.\nMutate the object.",
								"text": "Rectangle and Ellipse are not able to receive configs, only boolean\ni.e. set_interactive(rect, true); set_interactive(ellipse, false)\n",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 618,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 619,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "interactive config to be used"
									},
									"type": {
										"type": "reference",
										"name": "ObjectConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 620,
					"name": "set_origin",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1350,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 621,
							"name": "set_origin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the origin in which all position related will be relative to.\nIn other words, the anchor of the object.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 622,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 623,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new anchor x coordinate, between value 0 to 1."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 624,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new anchor y coordinate, between value 0 to 1."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 625,
					"name": "set_position",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1367,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 626,
							"name": "set_position",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the position of the game object\nMutate the object",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 627,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 628,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new x position"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 629,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new y position"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 635,
					"name": "set_rotation",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1400,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 636,
							"name": "set_rotation",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the rotation of the object.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 637,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 638,
									"name": "rad",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rotation, in radians"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				},
				{
					"id": 630,
					"name": "set_scale",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "game/functions.ts",
							"line": 1384,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 631,
							"name": "set_scale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the scale of the object.\nMutate the object.",
								"returns": "game object itself\n"
							},
							"parameters": [
								{
									"id": 632,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "object to be set"
									},
									"type": {
										"type": "reference",
										"name": "GameObject"
									}
								},
								{
									"id": 633,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new x scale"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 634,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "new y scale"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "GameObject"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						550,
						653,
						648,
						600,
						644,
						557,
						503,
						513,
						518,
						569,
						465,
						596,
						588,
						564,
						476,
						580,
						482,
						521,
						574,
						468,
						491,
						604,
						534,
						532,
						530,
						528,
						536,
						540,
						544,
						560,
						553,
						462,
						658,
						612,
						607,
						639,
						616,
						620,
						625,
						635,
						630
					]
				}
			],
			"sources": [
				{
					"fileName": "game/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 12,
			"name": "pix_n_flix",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "The pix_n_flix library allows us to process still images and video. Each Image is a\ntwo-dimensional array of Pixels, and a Pixel consists of red, blue and green color\nvalues, each ranging from 0 and 255. To access these color values of a Pixel, we\nprovide the functions red_of, blue_of and green_of.",
				"text": "A central element of pix_n_flix is the notion of a Filter, a function that is applied\nto two images: the source Image and the destination Image. We can install a given\nFilter to be used to transform the Images that the camera captures into images\ndisplayed on the output screen by using the function install_filter. The output\nscreen is shown in the Source Academy in the tab with the \"Video Display\" icon (camera).\n\nThe size of the output screen can be changed by the user. To access the current size of the\noutput screen, we provide the functions video_height and video_width.\n"
			},
			"originalName": "pix_n_flix/functions",
			"children": [
				{
					"id": 24,
					"name": "alpha_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 471,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "alpha_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the alpha component of a given Pixel.",
								"returns": "The alpha component as a number between 0 and 255\n"
							},
							"parameters": [
								{
									"id": 26,
									"name": "pixel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Given Pixel"
									},
									"type": {
										"type": "reference",
										"name": "Pixel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 21,
					"name": "blue_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 460,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 22,
							"name": "blue_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the blue component of a given Pixel.",
								"returns": "The blue component as a number between 0 and 255\n"
							},
							"parameters": [
								{
									"id": 23,
									"name": "pixel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Given Pixel"
									},
									"type": {
										"type": "reference",
										"name": "Pixel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 47,
					"name": "compose_filter",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 570,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 48,
							"name": "compose_filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new filter that is the result of applying both\nfilter1 and filter2 together.",
								"returns": "Filter after applying filter1 and filter2\n"
							},
							"parameters": [
								{
									"id": 49,
									"name": "filter1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "First filter"
									},
									"type": {
										"type": "reference",
										"name": "Filter"
									}
								},
								{
									"id": 50,
									"name": "filter2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Second filter"
									},
									"type": {
										"type": "reference",
										"name": "Filter"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Filter"
							}
						}
					]
				},
				{
					"id": 38,
					"name": "copy_image",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 531,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 39,
							"name": "copy_image",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The default filter that just copies the input 2D\ngrid to output."
							},
							"parameters": [
								{
									"id": 40,
									"name": "src",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "2D input src of pixels"
									},
									"type": {
										"type": "reference",
										"name": "Pixels"
									}
								},
								{
									"id": 41,
									"name": "dest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "2D output src of pixels\n"
									},
									"type": {
										"type": "reference",
										"name": "Pixels"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 18,
					"name": "green_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 449,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 19,
							"name": "green_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the green component of a given Pixel.",
								"returns": "The green component as a number between 0 and 255\n"
							},
							"parameters": [
								{
									"id": 20,
									"name": "pixel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Given Pixel"
									},
									"type": {
										"type": "reference",
										"name": "Pixel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 42,
					"name": "install_filter",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 551,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 43,
							"name": "install_filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Installs a given filter to be used to transform\nthe images that the camera captures into images\ndisplayed on the screen.",
								"text": "A filter is a function that is applied to two\ntwo-dimensional arrays of Pixels:\nthe source image and the destination image.\n"
							},
							"parameters": [
								{
									"id": 44,
									"name": "_filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Filter"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 51,
					"name": "pause_at",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 583,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 52,
							"name": "pause_at",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Pauses the video after a set delay."
							},
							"parameters": [
								{
									"id": 53,
									"name": "delay",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Delay in ms after the video starts.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 15,
					"name": "red_of",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 438,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 16,
							"name": "red_of",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the red component of a given Pixel.",
								"returns": "The red component as a number between 0 and 255\n"
							},
							"parameters": [
								{
									"id": 17,
									"name": "pixel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Given Pixel"
									},
									"type": {
										"type": "reference",
										"name": "Pixel"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 45,
					"name": "reset_filter",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 558,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 46,
							"name": "reset_filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resets any filter applied on the video."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 54,
					"name": "set_dimensions",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 598,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 55,
							"name": "set_dimensions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets height of video frame.\nNote: Only accepts height and width within the range of 1 and 500."
							},
							"parameters": [
								{
									"id": 56,
									"name": "width",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Width of video (Default value of 300)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 57,
									"name": "height",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Height of video (Default value of 400)\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 58,
					"name": "set_fps",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 608,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "set_fps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets frames per second (FPS) of the video.\nNote: Only accepts FPS values within the range of 2 to 30."
							},
							"parameters": [
								{
									"id": 60,
									"name": "fps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "FPS of video (Default value of 10)\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 27,
					"name": "set_rgba",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 486,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 28,
							"name": "set_rgba",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Assigns the red, green, blue and alpha components of a pixel\nto given values."
							},
							"parameters": [
								{
									"id": 29,
									"name": "pixel",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Given Pixel"
									},
									"type": {
										"type": "reference",
										"name": "Pixel"
									}
								},
								{
									"id": 30,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The red component as a number between 0 and 255"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 31,
									"name": "g",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The green component as a number between 0 and 255"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 32,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The blue component as a number between 0 and 255"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 33,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The alpha component as a number between 0 and 255\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 13,
					"name": "start",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 420,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 14,
							"name": "start",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Initialize the PixNFlix live feed with default globals."
							},
							"type": {
								"type": "reference",
								"name": "Video"
							}
						}
					]
				},
				{
					"id": 61,
					"name": "use_local_video",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 615,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 62,
							"name": "use_local_video",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Allows you to upload videos into Pix-n-Flix"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 34,
					"name": "video_height",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 510,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 35,
							"name": "video_height",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current height of the output video display in\npixels, i.e. the number of pixels in vertical direction.",
								"returns": "height of output display (in pixels)\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 36,
					"name": "video_width",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "pix_n_flix/functions.ts",
							"line": 520,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 37,
							"name": "video_width",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current width of the output video display in\npixels, i.e. the number of pixels in horizontal direction.",
								"returns": "Width of output display (in pixels)\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						24,
						21,
						47,
						38,
						18,
						42,
						51,
						15,
						45,
						54,
						58,
						27,
						13,
						61,
						34,
						36
					]
				}
			],
			"sources": [
				{
					"fileName": "pix_n_flix/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "repeat",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "This is the official documentation for the repeat module."
			},
			"originalName": "repeat/functions",
			"children": [
				{
					"id": 2,
					"name": "repeat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "repeat/functions.ts",
							"line": 18,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "repeat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new function which when applied to an argument, has the same effect\nas applying the specified function to the same argument n times.",
								"returns": "the new function that has the same effect as func repeated n times\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\nconst plusFour = repeat(x => x + 2);\nplusFour(0); // Returns 4\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the function to be repeated"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								},
								{
									"id": 5,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the number of times to repeat the function"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						}
					]
				},
				{
					"id": 9,
					"name": "thrice",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "repeat/functions.ts",
							"line": 48,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "thrice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new function which when applied to an argument, has the same effect\nas applying the specified function to the same argument 3 times.",
								"returns": "the new function that has the same effect as `(x => func(func(func(x))))`\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\nconst plusNine = thrice(x => x + 3);\nplusNine(0); // Returns 9\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 11,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the function to be repeated"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						}
					]
				},
				{
					"id": 6,
					"name": "twice",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "repeat/functions.ts",
							"line": 33,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 7,
							"name": "twice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a new function which when applied to an argument, has the same effect\nas applying the specified function to the same argument 2 times.",
								"returns": "the new function that has the same effect as `(x => func(func(x)))`\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```typescript\nconst plusTwo = twice(x => x + 1);\nplusTwo(2); // Returns 4\n```"
									}
								]
							},
							"parameters": [
								{
									"id": 8,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the function to be repeated"
									},
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Function"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2,
						9,
						6
					]
				}
			],
			"sources": [
				{
					"fileName": "repeat/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 661,
			"name": "rune",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "The module `rune` provides functions for drawing runes.",
				"text": "A *Rune* is defined by its vertices (x,y,z,t), the colors on its vertices (r,g,b,a), a transformation matrix for rendering the Rune and a (could be empty) list of its sub-Runes."
			},
			"originalName": "rune/functions",
			"children": [
				{
					"id": 797,
					"name": "blank",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a blank square"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 43,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 803,
					"name": "circle",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a circle"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 73,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 801,
					"name": "corner",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with black triangle,\nfilling upper right corner"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 63,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 804,
					"name": "heart",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a heart"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 77,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 802,
					"name": "nova",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of two overlapping\ntriangles, residing in the upper half\nof the shape"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 69,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 805,
					"name": "pentagram",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a pentagram"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 81,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 798,
					"name": "rcross",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a\nsmallsquare inside a large square,\neach diagonally split into a\nblack and white half"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 50,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 806,
					"name": "ribbon",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a ribbon\nwinding outwards in an anticlockwise spiral"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 86,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 799,
					"name": "sail",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a sail"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 54,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 796,
					"name": "square",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a full square"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 39,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 800,
					"name": "triangle",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Rune with the shape of a triangle"
					},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 58,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Rune"
					},
					"defaultValue": "..."
				},
				{
					"id": 785,
					"name": "anaglyph",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 609,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 786,
							"name": "anaglyph",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "render the given Rune in an Anaglyph. Use your 3D-glasses\nto view the Anaglyph.",
								"returns": "with drawing method set to anaglyph\n"
							},
							"parameters": [
								{
									"id": 787,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Rune to render"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 710,
					"name": "beside",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 305,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 711,
							"name": "beside",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from two given Runes by\nplacing the first on the left of the second,\nboth occupying equal portions of the width\nof the result",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 712,
									"name": "rune1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 713,
									"name": "rune2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 705,
					"name": "beside_frac",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 281,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 706,
							"name": "beside_frac",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from two given Runes by\nplacing the first on the left of the second\nsuch that the first one occupies frac\nportion of the width of the result and\nthe second the rest",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 707,
									"name": "frac",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1 (inclusive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 708,
									"name": "rune1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 709,
									"name": "rune2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 776,
					"name": "black",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 568,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 777,
							"name": "black",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune black.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 778,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 761,
					"name": "blue",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 518,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 762,
							"name": "blue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune blue.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 763,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 773,
					"name": "brown",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 558,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 774,
							"name": "brown",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune brown.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 775,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 740,
					"name": "color",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 446,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 741,
							"name": "color",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "adds color to rune by specifying\nthe red, green, blue (RGB) value, ranging from 0.0 to 1.0.\nRGB is additive: if all values are 1, the color is white,\nand if all values are 0, the color is black.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 742,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to add color to"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 743,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "red value [0.0-1.0]"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 744,
									"name": "g",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "green value [0.0-1.0]"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 745,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "blue value [0.0-1.0]"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 717,
					"name": "flip_horiz",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 330,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 718,
							"name": "flip_horiz",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune by\nflipping it around a vertical axis,\ncreating a mirror image",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 719,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 714,
					"name": "flip_vert",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 318,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 715,
							"name": "flip_vert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune by\nflipping it around a horizontal axis,\nturning it upside down",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 716,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 662,
					"name": "from_url",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 97,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 663,
							"name": "from_url",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "create a rune using the image provided in the url",
								"returns": "a rune created using the image.\n"
							},
							"parameters": [
								{
									"id": 664,
									"name": "imageUrl",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a URL to the image that is used to create the rune.\nnote that the url must be from a domain that allows CORS."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 764,
					"name": "green",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 528,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 765,
							"name": "green",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune green.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 766,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 792,
					"name": "hollusion",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 641,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 793,
							"name": "hollusion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "render the given Rune with hollusion, with default magnitude 0.1.",
								"returns": "with drawing method set to hollusion\n"
							},
							"parameters": [
								{
									"id": 794,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Rune to render"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 788,
					"name": "hollusion_magnitude",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 625,
							"character": 35
						}
					],
					"signatures": [
						{
							"id": 789,
							"name": "hollusion_magnitude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "render the given Rune with hollusion, with adjustable magnitude.",
								"returns": "with drawing method set to hollusion\n"
							},
							"parameters": [
								{
									"id": 790,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Rune to render"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 791,
									"name": "magnitude",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "(optional) the magnitude of hollusion"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "0.1"
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 758,
					"name": "indigo",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 508,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 759,
							"name": "indigo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune indigo.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 760,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 720,
					"name": "make_cross",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 342,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 721,
							"name": "make_cross",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune by\narranging into a square for copies of the\ngiven Rune in different orientations",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 722,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 770,
					"name": "orange",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 548,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 771,
							"name": "orange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune orange.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 772,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 736,
					"name": "overlay",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 425,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 737,
							"name": "overlay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "the depth range of the z-axis of a rune is [0,-1], this function maps the depth range of rune1 and rune2 to [0,-0.5] and [-0.5,-1] respectively.",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 738,
									"name": "rune1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 739,
									"name": "rune2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 731,
					"name": "overlay_frac",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 380,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 732,
							"name": "overlay_frac",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "the depth range of the z-axis of a rune is [0,-1], this function gives a [0, -frac] of the depth range to rune1 and the rest to rune2.",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 733,
									"name": "frac",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1 (inclusive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 734,
									"name": "rune1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 735,
									"name": "rune2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 752,
					"name": "pink",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 488,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 753,
							"name": "pink",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune pink.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 754,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 755,
					"name": "purple",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 498,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 756,
							"name": "purple",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune purple.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 757,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 699,
					"name": "quarter_turn_left",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 254,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 700,
							"name": "quarter_turn_left",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune\nby turning it a quarter-turn in\nanti-clockwise direction.",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 701,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 696,
					"name": "quarter_turn_right",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 242,
							"character": 34
						}
					],
					"signatures": [
						{
							"id": 697,
							"name": "quarter_turn_right",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune\nby turning it a quarter-turn around the centre in\nclockwise direction.",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 698,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 746,
					"name": "random_color",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 462,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 747,
							"name": "random_color",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gives random color to the given rune.\nThe color is chosen randomly from the following nine\ncolors: red, pink, purple, indigo, blue, green, yellow, orange, brown",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 748,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 749,
					"name": "red",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 478,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 750,
							"name": "red",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune red.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 751,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 723,
					"name": "repeat_pattern",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 358,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 724,
							"name": "repeat_pattern",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "applies a given function n times to an initial value",
								"returns": "- result of n times application of\n              pattern to initial: pattern(pattern(...pattern(pattern(initial))...))\n"
							},
							"parameters": [
								{
									"id": 725,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "a non-negative integer"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 726,
									"name": "pattern",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "unary function from Rune to Rune"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 727,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"sources": [
												{
													"fileName": "rune/functions.ts",
													"line": 360,
													"character": 10
												}
											],
											"signatures": [
												{
													"id": 728,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 729,
															"name": "a",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Rune"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Rune"
													}
												}
											]
										}
									}
								},
								{
									"id": 730,
									"name": "initial",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the initial Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 679,
					"name": "rotate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 169,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 680,
							"name": "rotate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "rotates a given Rune by a given angle,\ngiven in radians, in anti-clockwise direction.\nNote that parts of the Rune\nmay be cropped as a result.",
								"returns": "rotated Rune\n"
							},
							"parameters": [
								{
									"id": 681,
									"name": "rad",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "angle in radians"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 682,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 670,
					"name": "scale",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 137,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 671,
							"name": "scale",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "scales a given Rune by a given factor in both x and y direction",
								"returns": "resulting scaled Rune\n"
							},
							"parameters": [
								{
									"id": 672,
									"name": "ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 673,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 665,
					"name": "scale_independent",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 116,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 666,
							"name": "scale_independent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "scales a given Rune by separate factors in x and y direction",
								"returns": "resulting scaled Rune\n"
							},
							"parameters": [
								{
									"id": 667,
									"name": "ratio_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor in x direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 668,
									"name": "ratio_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "scaling factor in y direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 669,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 782,
					"name": "show",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 593,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 783,
							"name": "show",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Show the rune on the tab using the basic drawing.",
								"returns": "with drawing method set to normal\n"
							},
							"parameters": [
								{
									"id": 784,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Rune to render"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 688,
					"name": "stack",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 214,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 689,
							"name": "stack",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from two given Runes by\nplacing the first on top of the second, each\noccupying equal parts of the height of the\nresult",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 690,
									"name": "rune1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 691,
									"name": "rune2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 683,
					"name": "stack_frac",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 190,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 684,
							"name": "stack_frac",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from two given Runes by\nplacing the first on top of the second\nsuch that the first one occupies frac\nportion of the height of the result and\nthe second the rest",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 685,
									"name": "frac",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "fraction between 0 and 1 (inclusive)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 686,
									"name": "rune1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								},
								{
									"id": 687,
									"name": "rune2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 692,
					"name": "stackn",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 227,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 693,
							"name": "stackn",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune\nby vertically stacking n copies of it",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 694,
									"name": "n",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "positive integer"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 695,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 674,
					"name": "translate",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 149,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 675,
							"name": "translate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "translates a given Rune by given values in x and y direction",
								"returns": "resulting translated Rune\n"
							},
							"parameters": [
								{
									"id": 676,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "translation in x direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 677,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "translation in y direction"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 678,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 702,
					"name": "turn_upside_down",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 265,
							"character": 32
						}
					],
					"signatures": [
						{
							"id": 703,
							"name": "turn_upside_down",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "makes a new Rune from a given Rune\nby turning it upside-down",
								"returns": "resulting Rune\n"
							},
							"parameters": [
								{
									"id": 704,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Rune"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 779,
					"name": "white",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 578,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 780,
							"name": "white",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune white.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 781,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				},
				{
					"id": 767,
					"name": "yellow",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "rune/functions.ts",
							"line": 538,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 768,
							"name": "yellow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "colors the given rune yellow.",
								"returns": "the colored Rune\n"
							},
							"parameters": [
								{
									"id": 769,
									"name": "rune",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the rune to color"
									},
									"type": {
										"type": "reference",
										"name": "Rune"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Rune"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						797,
						803,
						801,
						804,
						802,
						805,
						798,
						806,
						799,
						796,
						800
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						785,
						710,
						705,
						776,
						761,
						773,
						740,
						717,
						714,
						662,
						764,
						792,
						788,
						758,
						720,
						770,
						736,
						731,
						752,
						755,
						699,
						696,
						746,
						749,
						723,
						679,
						670,
						665,
						782,
						688,
						683,
						692,
						674,
						702,
						779,
						767
					]
				}
			],
			"sources": [
				{
					"fileName": "rune/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 310,
			"name": "scrabble",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "The `scrabble` Source Module provides the allowable\nwords in Scrabble in a list and in an array, according to\nhttps://github.com/benjamincrom/scrabble/blob/master/scrabble/dictionary.json"
			},
			"originalName": "scrabble/functions",
			"children": [
				{
					"id": 318,
					"name": "scrabble_array",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "`scrabble_array` is an array of strings, each representing\nan allowed word in Scrabble."
					},
					"sources": [
						{
							"fileName": "scrabble/functions.ts",
							"line": 17,
							"character": 27
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 319,
					"name": "scrabble_list",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "`scrabble_list` is a list of strings, each representing\nan allowed word in Scrabble."
					},
					"sources": [
						{
							"fileName": "scrabble/functions.ts",
							"line": 67611,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "List"
					},
					"defaultValue": "..."
				},
				{
					"id": 315,
					"name": "arrayLength",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "scrabble/functions.ts",
							"line": 67618,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 316,
							"name": "arrayLength",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 317,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 311,
					"name": "charAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "scrabble/functions.ts",
							"line": 67613,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 312,
							"name": "charAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 313,
									"name": "s",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 314,
									"name": "i",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						318,
						319
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						315,
						311
					]
				}
			],
			"sources": [
				{
					"fileName": "scrabble/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 194,
			"name": "sound",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "The sounds library provides functions for constructing and playing sounds.",
				"text": "A wave is a function that takes in a number `t` and returns\na number representing the amplitude at time `t`.\nThe amplitude should fall within the range of [-1, 1].\n\nA Sound is a pair(wave, duration) where duration is the length of the sound in seconds.\nThe constructor make_sound and accessors get_wave and get_duration are provided.\n\nSound Discipline:\nFor all sounds, the wave function applied to and time `t` beyond its duration returns 0, that is:\n`(get_wave(sound))(get_duration(sound) + x) === 0` for any x >= 0.\n\nTwo functions which combine Sounds, `consecutively` and `simultaneously` are given.\nAdditionally, we provide sound transformation functions `adsr` and `phase_mod`\nwhich take in a Sound and return a Sound.\n\nFinally, the provided `play` function takes in a Sound and plays it using your\ncomputer's sound system.\n",
				"tags": [
					{
						"tag": "author",
						"text": "Koh Shang Hui"
					},
					{
						"tag": "author",
						"text": "Samyukta Sounderraman\n"
					}
				]
			},
			"originalName": "sound/functions",
			"children": [
				{
					"id": 263,
					"name": "adsr",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 663,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 264,
							"name": "adsr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an envelope: a function from Sound to Sound.\nWhen the adsr envelope is applied to a Sound, it returns\na new Sound with its amplitude modified according to parameters\nThe relative amplitude increases from 0 to 1 linearly over the\nattack proportion, then decreases from 1 to sustain level over the\ndecay proportion, and remains at that level until the release\nproportion when it decays back to 0.",
								"returns": "Envelope a function from Sound to Sound",
								"tags": [
									{
										"tag": "example",
										"text": "adsr(0.2, 0.3, 0.3, 0.1)(sound);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 265,
									"name": "attack_ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "proportion of Sound in attack phase"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 266,
									"name": "decay_ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "proportion of Sound decay phase"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 267,
									"name": "sustain_level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "sustain level between 0 and 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 268,
									"name": "release_ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "proportion of Sound in release phase"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SoundTransformer"
							}
						}
					]
				},
				{
					"id": 289,
					"name": "bell",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 861,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 290,
							"name": "bell",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a bell, playing\na given note for a given duration",
								"returns": "Sound resulting bell Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "bell(40, 1);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 291,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 292,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 293,
					"name": "cello",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 883,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 294,
							"name": "cello",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a cello, playing\na given note for a given duration",
								"returns": "Sound resulting cello Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "cello(36, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 295,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 296,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 257,
					"name": "consecutively",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 608,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 258,
							"name": "consecutively",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a new Sound by combining the sounds in a given list\nwhere the second sound is appended to the end of the first sound,\nthe third sound is appended to the end of the second sound, and\nso on. The effect is that the sounds in the list are joined end-to-end",
								"returns": "the combined Sound",
								"tags": [
									{
										"tag": "example",
										"text": "consecutively(list(sine_sound(200, 2), sine_sound(400, 3)));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 259,
									"name": "list_of_sounds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given list of sounds"
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 217,
					"name": "get_duration",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 298,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 218,
							"name": "get_duration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Accesses the duration of a given Sound.",
								"returns": "the duration of the Sound",
								"tags": [
									{
										"tag": "example",
										"text": "get_duration(make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5)); // Returns 5\n"
									}
								]
							},
							"parameters": [
								{
									"id": 219,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Sound"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 214,
					"name": "get_wave",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 287,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 215,
							"name": "get_wave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Accesses the wave function of a given Sound.",
								"returns": "the wave function of the Sound",
								"tags": [
									{
										"tag": "example",
										"text": "get_wave(make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5)); // Returns t => Math_sin(2 * Math_PI * 440 * t)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 216,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Sound"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Wave"
							}
						}
					]
				},
				{
					"id": 195,
					"name": "init_record",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 168,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 196,
							"name": "init_record",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Initialize recording by obtaining permission\nto use the default device microphone",
								"returns": "string \"obtaining recording permission\"\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 220,
					"name": "is_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 309,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 221,
							"name": "is_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the argument is a Sound",
								"returns": "true if x is a Sound, false otherwise",
								"tags": [
									{
										"tag": "example",
										"text": "is_sound(make_sound(t => 0, 2)); // Returns true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 222,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input to be checked"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 286,
					"name": "letter_name_to_frequency",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 847,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 287,
							"name": "letter_name_to_frequency",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a letter name to its corresponding frequency.",
								"returns": "the corresponding frequency",
								"tags": [
									{
										"tag": "example",
										"text": "letter_name_to_frequency(\"A4\"); // Returns 440\n"
									}
								]
							},
							"parameters": [
								{
									"id": 288,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 280,
					"name": "letter_name_to_midi_note",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 776,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 281,
							"name": "letter_name_to_midi_note",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a letter name to its corresponding MIDI note.\nThe letter name is represented in standard pitch notation.\nExamples are \"A5\", \"Db3\", \"C#7\".\nRefer to <a href=\"https://i.imgur.com/qGQgmYr.png\">this mapping from\nletter name to midi notes.",
								"returns": "the corresponding midi note",
								"tags": [
									{
										"tag": "example",
										"text": "letter_name_to_midi_note(\"C4\"); // Returns 60\n"
									}
								]
							},
							"parameters": [
								{
									"id": 282,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 210,
					"name": "make_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 276,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 211,
							"name": "make_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a Sound with given wave function and duration.\nThe wave function is a function: number -> number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.",
								"returns": "with wave as wave function and duration as duration",
								"tags": [
									{
										"tag": "example",
										"text": "const s = make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 212,
									"name": "wave",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "wave function of the sound"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 213,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration of the sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 283,
					"name": "midi_note_to_frequency",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 835,
							"character": 38
						}
					],
					"signatures": [
						{
							"id": 284,
							"name": "midi_note_to_frequency",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a MIDI note to its corresponding frequency.",
								"returns": "the frequency of the MIDI note",
								"tags": [
									{
										"tag": "example",
										"text": "midi_note_to_frequency(69); // Returns 440\n"
									}
								]
							},
							"parameters": [
								{
									"id": 285,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 235,
					"name": "noise_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 501,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 236,
							"name": "noise_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a noise sound with given duration",
								"returns": "resulting noise sound",
								"tags": [
									{
										"tag": "example",
										"text": "noise_sound(5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 237,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the noise sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 275,
					"name": "phase_mod",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 751,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 276,
							"name": "phase_mod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a SoundTransformer which uses its argument\nto modulate the phase of a (carrier) sine wave\nof given frequency and duration with a given Sound.\nModulating with a low frequency Sound results in a vibrato effect.\nModulating with a Sound with frequencies comparable to\nthe sine wave frequency results in more complex wave forms.",
								"returns": "function which takes in a Sound and returns a Sound",
								"tags": [
									{
										"tag": "example",
										"text": "phase_mod(440, 5, 1)(sine_sound(220, 5));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 277,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the sine wave to be modulated"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 278,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the output soud"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 279,
									"name": "amount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the amount of modulation to apply to the carrier sine wave"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SoundTransformer"
							}
						}
					]
				},
				{
					"id": 297,
					"name": "piano",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 900,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 298,
							"name": "piano",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a piano, playing\na given note for a given duration",
								"returns": "Sound resulting piano Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "piano(48, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 299,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 300,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 227,
					"name": "play",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 338,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 228,
							"name": "play",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given Sound using the computer’s sound device.\nThe sound is only played if no other sounds are currently being played.",
								"returns": "the given sound",
								"tags": [
									{
										"tag": "example",
										"text": "play(sine_sound(440, 5));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 229,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the sound to play"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AudioPlayed"
							}
						}
					]
				},
				{
					"id": 230,
					"name": "play_concurrently",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 426,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 231,
							"name": "play_concurrently",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given Sound using the computer’s sound device\non top of any sounds that are currently playing.",
								"tags": [
									{
										"tag": "example",
										"text": "play_concurrently(sine_sound(440, 5));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 232,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the sound to play"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 223,
					"name": "play_wave",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 326,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 224,
							"name": "play_wave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given Wave using the computer’s sound device, for the duration\ngiven in seconds.\nThe sound is only played if no other sounds are currently being played.",
								"returns": "the given sound",
								"tags": [
									{
										"tag": "example",
										"text": "play_wave(t => math_sin(t * 3000), 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 225,
									"name": "wave",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the wave function to play, starting at 0"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 226,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AudioPlayed"
							}
						}
					]
				},
				{
					"id": 197,
					"name": "record",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 191,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 198,
							"name": "record",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "takes a <CODE>buffer</CODE> duration (in seconds) as argument, and\nreturns a nullary stop function <CODE>stop</CODE>. A call\n<CODE>stop()</CODE> returns a sound promise: a nullary function\nthat returns a sound. Example: <PRE><CODE>init_record();\nconst stop = record(0.5);\n// record after 0.5 seconds. Then in next query:\nconst promise = stop();\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>",
								"returns": "nullary <CODE>stop</CODE> function;\n<CODE>stop()</CODE> stops the recording and\nreturns a sound promise: a nullary function that returns the recorded sound\n"
							},
							"parameters": [
								{
									"id": 199,
									"name": "buffer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "pause before recording, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 200,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "sound/functions.ts",
											"line": 191,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 201,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 202,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "sound/functions.ts",
															"line": 191,
															"character": 45
														}
													],
													"signatures": [
														{
															"id": 203,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Sound"
															}
														}
													]
												}
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 204,
					"name": "record_for",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 224,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 205,
							"name": "record_for",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Records a sound of given <CODE>duration</CODE> in seconds, after\na <CODE>buffer</CODE> also in seconds, and\nreturns a sound promise: a nullary function\nthat returns a sound. Example: <PRE><CODE>init_record();\nconst promise = record_for(2, 0.5);\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>",
								"returns": "<CODE>promise</CODE>: nullary function which returns recorded sound\n"
							},
							"parameters": [
								{
									"id": 206,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 207,
									"name": "buffer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "pause before recording, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 208,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "sound/functions.ts",
											"line": 224,
											"character": 61
										}
									],
									"signatures": [
										{
											"id": 209,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Sound"
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 253,
					"name": "sawtooth_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 582,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 254,
							"name": "sawtooth_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a sawtooth wave sound with given frequency and duration",
								"returns": "resulting sawtooth wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "sawtooth_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 255,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the sawtooth wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 256,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the sawtooth wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 238,
					"name": "silence_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 512,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 239,
							"name": "silence_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a silence sound with given duration",
								"returns": "resulting silence sound",
								"tags": [
									{
										"tag": "example",
										"text": "silence_sound(5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 240,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the silence sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 260,
					"name": "simultaneously",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 628,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 261,
							"name": "simultaneously",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a new Sound by combining the sounds in a given list\nwhere all the sounds are overlapped on top of each other.",
								"returns": "the combined Sound",
								"tags": [
									{
										"tag": "example",
										"text": "simultaneously(list(sine_sound(200, 2), sine_sound(400, 3)))\n"
									}
								]
							},
							"parameters": [
								{
									"id": 262,
									"name": "list_of_sounds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given list of sounds"
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 241,
					"name": "sine_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 524,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 242,
							"name": "sine_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a sine wave sound with given frequency and duration",
								"returns": "resulting sine wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "sine_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 243,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the sine wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 244,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the sine wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 245,
					"name": "square_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 536,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "square_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a square wave sound with given frequency and duration",
								"returns": "resulting square wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "square_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 247,
									"name": "f",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 248,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the square wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 269,
					"name": "stacking_adsr",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 714,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 270,
							"name": "stacking_adsr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Sound that results from applying a list of envelopes\nto a given wave form. The wave form is a Sound generator that\ntakes a frequency and a duration as arguments and produces a\nSound with the given frequency and duration. Each envelope is\napplied to a harmonic: the first harmonic has the given frequency,\nthe second has twice the frequency, the third three times the\nfrequency etc. The harmonics are then layered simultaneously to\nproduce the resulting Sound.",
								"returns": "Sound resulting Sound",
								"tags": [
									{
										"tag": "example",
										"text": "stacking_adsr(sine_sound, 300, 5, list(adsr(0.1, 0.3, 0.2, 0.5), adsr(0.2, 0.5, 0.6, 0.1), adsr(0.3, 0.1, 0.7, 0.3)));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 271,
									"name": "waveform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "function from pair(frequency, duration) to Sound"
									},
									"type": {
										"type": "reference",
										"name": "SoundProducer"
									}
								},
								{
									"id": 272,
									"name": "base_frequency",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "frequency of the first harmonic"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 273,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration of the produced Sound, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 274,
									"name": "envelopes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "– list of envelopes, which are functions from Sound to Sound"
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 233,
					"name": "stop",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 487,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 234,
							"name": "stop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stops all currently playing sounds."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 249,
					"name": "triangle_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 558,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 250,
							"name": "triangle_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a triangle wave sound with given frequency and duration",
								"returns": "resulting triangle wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "triangle_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 251,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the triangle wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 252,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the triangle wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 301,
					"name": "trombone",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 917,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 302,
							"name": "trombone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a trombone, playing\na given note for a given duration",
								"returns": "Sound resulting trombone Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "trombone(60, 2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 303,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 304,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 305,
					"name": "violin",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound/functions.ts",
							"line": 934,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 306,
							"name": "violin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a violin, playing\na given note for a given duration",
								"returns": "Sound resulting violin Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "violin(53, 4);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 307,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 308,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						263,
						289,
						293,
						257,
						217,
						214,
						195,
						220,
						286,
						280,
						210,
						283,
						235,
						275,
						297,
						227,
						230,
						223,
						197,
						204,
						253,
						238,
						260,
						241,
						245,
						269,
						233,
						249,
						301,
						305
					]
				}
			],
			"sources": [
				{
					"fileName": "sound/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 807,
			"name": "sound_matrix/functions",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 818,
					"name": "ToneMatrix",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "sound_matrix/functions.ts",
							"line": 23,
							"character": 23
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 819,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 830,
									"name": "bindMatrixButtons",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 831,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 832,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 824,
									"name": "clear_matrix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 825,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 826,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 820,
									"name": "initialise_matrix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 821,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 822,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 823,
															"name": "$container",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "HTMLElement"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 827,
									"name": "randomise_matrix",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 828,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 829,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										830,
										824,
										820,
										827
									]
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 816,
					"name": "clear_all_timeout",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound_matrix/functions.ts",
							"line": 371,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 817,
							"name": "clear_all_timeout",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 810,
					"name": "clear_matrix",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound_matrix/functions.ts",
							"line": 344,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 811,
							"name": "clear_matrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 808,
					"name": "get_matrix",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound_matrix/functions.ts",
							"line": 330,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 809,
							"name": "get_matrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "List"
							}
						}
					]
				},
				{
					"id": 812,
					"name": "set_timeout",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "sound_matrix/functions.ts",
							"line": 362,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 813,
							"name": "set_timeout",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 814,
									"name": "f",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 815,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						818
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						816,
						810,
						808,
						812
					]
				}
			],
			"sources": [
				{
					"fileName": "sound_matrix/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 320,
			"name": "stereo_sound",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "The stereo sounds library build on the sounds library by accommodating stereo sounds.\nWithin this library, all sounds are represented in stereo, with two waves, left and right.",
				"text": "A Stereo Sound is a `pair(pair(left_wave, right_wave), duration)` where duration is the length of the sound in seconds.\nThe constructor `make_stereo_sound` and accessors `get_left_wave`, `get_right_wave`, and `get_duration` are provided.\nThe `make_sound` constructor from sounds is syntatic sugar for `make_stereo_sounds` with equal waves.\n",
				"tags": [
					{
						"tag": "author",
						"text": "Koh Shang Hui"
					},
					{
						"tag": "author",
						"text": "Samyukta Sounderraman\n"
					}
				]
			},
			"originalName": "stereo_sound/functions",
			"children": [
				{
					"id": 411,
					"name": "adsr",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 830,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 412,
							"name": "adsr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an envelope: a function from Sound to Sound.\nWhen the adsr envelope is applied to a Sound, it returns\na new Sound with its amplitude modified according to parameters\nThe relative amplitude increases from 0 to 1 linearly over the\nattack proportion, then decreases from 1 to sustain level over the\ndecay proportion, and remains at that level until the release\nproportion when it decays back to 0.",
								"returns": "Envelope a function from Sound to Sound",
								"tags": [
									{
										"tag": "example",
										"text": "adsr(0.2, 0.3, 0.3, 0.1)(sound);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 413,
									"name": "attack_ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "proportion of Sound in attack phase"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 414,
									"name": "decay_ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "proportion of Sound decay phase"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 415,
									"name": "sustain_level",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "sustain level between 0 and 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 416,
									"name": "release_ratio",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "proportion of Sound in release phase"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SoundTransformer"
							}
						}
					]
				},
				{
					"id": 437,
					"name": "bell",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1038,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 438,
							"name": "bell",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a bell, playing\na given note for a given duration",
								"returns": "Sound resulting bell Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "bell(40, 1);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 439,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 440,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 441,
					"name": "cello",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1060,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 442,
							"name": "cello",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a cello, playing\na given note for a given duration",
								"returns": "Sound resulting cello Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "cello(36, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 443,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 444,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 405,
					"name": "consecutively",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 764,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 406,
							"name": "consecutively",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a new Sound by combining the sounds in a given list\nwhere the second sound is appended to the end of the first sound,\nthe third sound is appended to the end of the second sound, and\nso on. The effect is that the sounds in the list are joined end-to-end",
								"returns": "the combined Sound",
								"tags": [
									{
										"tag": "example",
										"text": "consecutively(list(sine_sound(200, 2), sine_sound(400, 3)));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 407,
									"name": "list_of_sounds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given list of sounds"
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 351,
					"name": "get_duration",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 310,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "get_duration",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Accesses the duration of a given Sound.",
								"returns": "the duration of the Sound",
								"tags": [
									{
										"tag": "example",
										"text": "get_duration(make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5)); // Returns 5\n"
									}
								]
							},
							"parameters": [
								{
									"id": 353,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Sound"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 345,
					"name": "get_left_wave",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 288,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 346,
							"name": "get_left_wave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Accesses the left wave function of a given Sound.",
								"returns": "the wave function of the Sound",
								"tags": [
									{
										"tag": "example",
										"text": "get_wave(make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5)); // Returns t => Math_sin(2 * Math_PI * 440 * t)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 347,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Sound"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Wave"
							}
						}
					]
				},
				{
					"id": 348,
					"name": "get_right_wave",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 299,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 349,
							"name": "get_right_wave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Accesses the left wave function of a given Sound.",
								"returns": "the wave function of the Sound",
								"tags": [
									{
										"tag": "example",
										"text": "get_wave(make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5)); // Returns t => Math_sin(2 * Math_PI * 440 * t)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 350,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given Sound"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Wave"
							}
						}
					]
				},
				{
					"id": 321,
					"name": "init_record",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 152,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 322,
							"name": "init_record",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Initialize recording by obtaining permission\nto use the default device microphone",
								"returns": "string \"obtaining recording permission\"\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 354,
					"name": "is_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 321,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 355,
							"name": "is_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the argument is a Sound",
								"returns": "true if x is a Sound, false otherwise",
								"tags": [
									{
										"tag": "example",
										"text": "is_sound(make_sound(t => 0, 2)); // Returns true\n"
									}
								]
							},
							"parameters": [
								{
									"id": 356,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "input to be checked"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 434,
					"name": "letter_name_to_frequency",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1024,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 435,
							"name": "letter_name_to_frequency",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a letter name to its corresponding frequency.",
								"returns": "the corresponding frequency",
								"tags": [
									{
										"tag": "example",
										"text": "letter_name_to_frequency(\"A4\"); // Returns 440\n"
									}
								]
							},
							"parameters": [
								{
									"id": 436,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 428,
					"name": "letter_name_to_midi_note",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 953,
							"character": 40
						}
					],
					"signatures": [
						{
							"id": 429,
							"name": "letter_name_to_midi_note",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a letter name to its corresponding MIDI note.\nThe letter name is represented in standard pitch notation.\nExamples are \"A5\", \"Db3\", \"C#7\".\nRefer to <a href=\"https://i.imgur.com/qGQgmYr.png\">this mapping from\nletter name to midi notes.",
								"returns": "the corresponding midi note",
								"tags": [
									{
										"tag": "example",
										"text": "letter_name_to_midi_note(\"C4\"); // Returns 60\n"
									}
								]
							},
							"parameters": [
								{
									"id": 430,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 341,
					"name": "make_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 277,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 342,
							"name": "make_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a Sound with given wave function and duration.\nThe wave function is a function: number -> number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.",
								"returns": "with wave as wave function and duration as duration",
								"tags": [
									{
										"tag": "example",
										"text": "const s = make_sound(t => Math_sin(2 * Math_PI * 440 * t), 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 343,
									"name": "wave",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "wave function of the sound"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 344,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration of the sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 336,
					"name": "make_stereo_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 252,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 337,
							"name": "make_stereo_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a Stereo Sound with given wave function and duration.\nThe wave function is a function: number -> number\nthat takes in a non-negative input time and returns an amplitude\nbetween -1 and 1.",
								"returns": "resulting stereo sound",
								"tags": [
									{
										"tag": "example",
										"text": "const s = make_stereo_sound(t => Math_sin(2 * Math_PI * 440 * t), t => Math_sin(2 * Math_PI * 300 * t), 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 338,
									"name": "left_wave",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "wave function of the left channel of the sound"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 339,
									"name": "right_wave",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "wave function of the right channel of the sound"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 340,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration of the sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 431,
					"name": "midi_note_to_frequency",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1012,
							"character": 38
						}
					],
					"signatures": [
						{
							"id": 432,
							"name": "midi_note_to_frequency",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Converts a MIDI note to its corresponding frequency.",
								"returns": "the frequency of the MIDI note",
								"tags": [
									{
										"tag": "example",
										"text": "midi_note_to_frequency(69); // Returns 440\n"
									}
								]
							},
							"parameters": [
								{
									"id": 433,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 383,
					"name": "noise_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 657,
							"character": 27
						}
					],
					"signatures": [
						{
							"id": 384,
							"name": "noise_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a noise sound with given duration",
								"returns": "resulting noise sound",
								"tags": [
									{
										"tag": "example",
										"text": "noise_sound(5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 385,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the noise sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 377,
					"name": "pan",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 597,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 378,
							"name": "pan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Sound Transformer that pans a sound based on the pan amount.\nThe input sound is first squashed to mono.\nAn amount of `-1` is a hard left pan, `0` is balanced, `1` is hard right pan.",
								"returns": "a Sound Transformer that pans a Sound\n"
							},
							"parameters": [
								{
									"id": 379,
									"name": "amount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the pan amount, from -1 to 1"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SoundTransformer"
							}
						}
					]
				},
				{
					"id": 380,
					"name": "pan_mod",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 626,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 381,
							"name": "pan_mod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Sound Transformer that uses a Sound to pan another Sound.\nThe modulator is treated as a mono sound and its output is used to pan\nan input Sound.\n`-1` is a hard left pan, `0` is balanced, `1` is hard right pan.",
								"returns": "a Sound Transformer that pans a Sound\n"
							},
							"parameters": [
								{
									"id": 382,
									"name": "modulator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the Sound used to modulate the pan of another sound"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SoundTransformer"
							}
						}
					]
				},
				{
					"id": 423,
					"name": "phase_mod",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 923,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 424,
							"name": "phase_mod",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a SoundTransformer which uses its argument\nto modulate the phase of a (carrier) sine wave\nof given frequency and duration with a given Sound.\nModulating with a low frequency Sound results in a vibrato effect.\nModulating with a Sound with frequencies comparable to\nthe sine wave frequency results in more complex wave forms.",
								"returns": "function which takes in a Sound and returns a Sound",
								"tags": [
									{
										"tag": "example",
										"text": "phase_mod(440, 5, 1)(sine_sound(220, 5));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 425,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the sine wave to be modulated"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 426,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the output soud"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 427,
									"name": "amount",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the amount of modulation to apply to the carrier sine wave"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "SoundTransformer"
							}
						}
					]
				},
				{
					"id": 445,
					"name": "piano",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1077,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 446,
							"name": "piano",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a piano, playing\na given note for a given duration",
								"returns": "Sound resulting piano Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "piano(48, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 447,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 448,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 366,
					"name": "play",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 370,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 367,
							"name": "play",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given Sound using the computer’s sound device.\nThe sound is only played if no other sounds are currently being played.",
								"returns": "the given sound",
								"tags": [
									{
										"tag": "example",
										"text": "play(sine_sound(440, 5));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 368,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the sound to play"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AudioPlayed"
							}
						}
					]
				},
				{
					"id": 369,
					"name": "play_concurrently",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 480,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 370,
							"name": "play_concurrently",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given Sound using the computer’s sound device\non top of any sounds that are currently playing.",
								"tags": [
									{
										"tag": "example",
										"text": "play_concurrently(sine_sound(440, 5));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 371,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the sound to play"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 357,
					"name": "play_wave",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 339,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 358,
							"name": "play_wave",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given Wave using the computer’s sound device, for the duration\ngiven in seconds.\nThe sound is only played if no other sounds are currently being played.",
								"returns": "the given sound",
								"tags": [
									{
										"tag": "example",
										"text": "play_wave(t => math_sin(t * 3000), 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 359,
									"name": "wave",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the wave function to play, starting at 0"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 360,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AudioPlayed"
							}
						}
					]
				},
				{
					"id": 361,
					"name": "play_waves",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 354,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 362,
							"name": "play_waves",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Plays the given two Waves using the computer’s sound device, for the duration\ngiven in seconds. The first Wave is for the left channel, the second for the\nright channel.\nThe sound is only played if no other sounds are currently being played.",
								"returns": "the given sound",
								"tags": [
									{
										"tag": "example",
										"text": "play_waves(t => math_sin(t * 3000), t => math_sin(t * 6000), 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 363,
									"name": "wave1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the wave function to play on the left channel, starting at 0"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 364,
									"name": "wave2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the wave function to play on the right channel, starting at 0"
									},
									"type": {
										"type": "reference",
										"name": "Wave"
									}
								},
								{
									"id": 365,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "AudioPlayed"
							}
						}
					]
				},
				{
					"id": 323,
					"name": "record",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 175,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 324,
							"name": "record",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "takes a <CODE>buffer</CODE> duration (in seconds) as argument, and\nreturns a nullary stop function <CODE>stop</CODE>. A call\n<CODE>stop()</CODE> returns a sound promise: a nullary function\nthat returns a sound. Example: <PRE><CODE>init_record();\nconst stop = record(0.5);\n// record after 0.5 seconds. Then in next query:\nconst promise = stop();\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>",
								"returns": "nullary <CODE>stop</CODE> function;\n<CODE>stop()</CODE> stops the recording and\nreturns a sound promise: a nullary function that returns the recorded sound\n"
							},
							"parameters": [
								{
									"id": 325,
									"name": "buffer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "pause before recording, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 326,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "stereo_sound/functions.ts",
											"line": 175,
											"character": 39
										}
									],
									"signatures": [
										{
											"id": 327,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 328,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "stereo_sound/functions.ts",
															"line": 175,
															"character": 45
														}
													],
													"signatures": [
														{
															"id": 329,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Sound"
															}
														}
													]
												}
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 330,
					"name": "record_for",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 208,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 331,
							"name": "record_for",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Records a sound of given <CODE>duration</CODE> in seconds, after\na <CODE>buffer</CODE> also in seconds, and\nreturns a sound promise: a nullary function\nthat returns a sound. Example: <PRE><CODE>init_record();\nconst promise = record_for(2, 0.5);\n// In next query, you can play the promised sound, by\n// applying the promise:\nplay(promise());</CODE></PRE>",
								"returns": "<CODE>promise</CODE>: nullary function which returns the recorded sound\n"
							},
							"parameters": [
								{
									"id": 332,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 333,
									"name": "buffer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "pause before recording, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 334,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "stereo_sound/functions.ts",
											"line": 208,
											"character": 61
										}
									],
									"signatures": [
										{
											"id": 335,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Sound"
											}
										}
									]
								}
							}
						}
					]
				},
				{
					"id": 401,
					"name": "sawtooth_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 738,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 402,
							"name": "sawtooth_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a sawtooth wave sound with given frequency and duration",
								"returns": "resulting sawtooth wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "sawtooth_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 403,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the sawtooth wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 404,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the sawtooth wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 386,
					"name": "silence_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 668,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 387,
							"name": "silence_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a silence sound with given duration",
								"returns": "resulting silence sound",
								"tags": [
									{
										"tag": "example",
										"text": "silence_sound(5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 388,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the silence sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 408,
					"name": "simultaneously",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 787,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 409,
							"name": "simultaneously",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a new Sound by combining the sounds in a given list\nwhere all the sounds are overlapped on top of each other.",
								"returns": "the combined Sound",
								"tags": [
									{
										"tag": "example",
										"text": "simultaneously(list(sine_sound(200, 2), sine_sound(400, 3)))\n"
									}
								]
							},
							"parameters": [
								{
									"id": 410,
									"name": "list_of_sounds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "given list of sounds"
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 389,
					"name": "sine_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 680,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 390,
							"name": "sine_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a sine wave sound with given frequency and duration",
								"returns": "resulting sine wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "sine_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 391,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the sine wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 392,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the sine wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 393,
					"name": "square_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 692,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 394,
							"name": "square_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a square wave sound with given frequency and duration",
								"returns": "resulting square wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "square_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 395,
									"name": "f",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 396,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the square wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 374,
					"name": "squash",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 583,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 375,
							"name": "squash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Centers a Sound by averaging its left and right channels,\nresulting in an effectively mono sound.",
								"returns": "a new sound with the left and right channels averaged\n"
							},
							"parameters": [
								{
									"id": 376,
									"name": "sound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the sound to be squashed"
									},
									"type": {
										"type": "reference",
										"name": "Sound"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 417,
					"name": "stacking_adsr",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 886,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 418,
							"name": "stacking_adsr",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a Sound that results from applying a list of envelopes\nto a given wave form. The wave form is a Sound generator that\ntakes a frequency and a duration as arguments and produces a\nSound with the given frequency and duration. Each envelope is\napplied to a harmonic: the first harmonic has the given frequency,\nthe second has twice the frequency, the third three times the\nfrequency etc. The harmonics are then layered simultaneously to\nproduce the resulting Sound.",
								"returns": "Sound resulting Sound",
								"tags": [
									{
										"tag": "example",
										"text": "stacking_adsr(sine_sound, 300, 5, list(adsr(0.1, 0.3, 0.2, 0.5), adsr(0.2, 0.5, 0.6, 0.1), adsr(0.3, 0.1, 0.7, 0.3)));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 419,
									"name": "waveform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "function from pair(frequency, duration) to Sound"
									},
									"type": {
										"type": "reference",
										"name": "SoundProducer"
									}
								},
								{
									"id": 420,
									"name": "base_frequency",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "frequency of the first harmonic"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 421,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration of the produced Sound, in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 422,
									"name": "envelopes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "– list of envelopes, which are functions from Sound to Sound"
									},
									"type": {
										"type": "reference",
										"name": "List"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 372,
					"name": "stop",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 569,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 373,
							"name": "stop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stops all currently playing sounds."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 397,
					"name": "triangle_sound",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 714,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 398,
							"name": "triangle_sound",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Makes a triangle wave sound with given frequency and duration",
								"returns": "resulting triangle wave sound",
								"tags": [
									{
										"tag": "example",
										"text": "triangle_sound(440, 5);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 399,
									"name": "freq",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the frequency of the triangle wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 400,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the duration of the triangle wave sound"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 449,
					"name": "trombone",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1094,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 450,
							"name": "trombone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a trombone, playing\na given note for a given duration",
								"returns": "Sound resulting trombone Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "trombone(60, 2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 451,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 452,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				},
				{
					"id": 453,
					"name": "violin",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "stereo_sound/functions.ts",
							"line": 1111,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 454,
							"name": "violin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "returns a Sound reminiscent of a violin, playing\na given note for a given duration",
								"returns": "Sound resulting violin Sound with given pitch and duration",
								"tags": [
									{
										"tag": "example",
										"text": "violin(53, 4);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 455,
									"name": "note",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "MIDI note"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 456,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "duration in seconds"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Sound"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						411,
						437,
						441,
						405,
						351,
						345,
						348,
						321,
						354,
						434,
						428,
						341,
						336,
						431,
						383,
						377,
						380,
						423,
						445,
						366,
						369,
						357,
						361,
						323,
						330,
						401,
						386,
						408,
						389,
						393,
						374,
						417,
						372,
						397,
						449,
						453
					]
				}
			],
			"sources": [
				{
					"fileName": "stereo_sound/functions.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				63,
				71,
				457,
				12,
				1,
				661,
				310,
				194,
				807,
				320
			]
		}
	]
}